#!/usr/bin/env bash
# Copyright 2021 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DCV_INSTALL_TASK="NiceDCVInitialization"
export _RETRIES_TIMEOUT="${CP_DCV_RETRY_TIMEOUT:-30}"
export _RETRIES_COUNT="${CP_DCV_RETRIES_COUNT:-60}"

function install_prerequisites {
  pipe_log_info "Installing DCV prerequisites" "$DCV_INSTALL_TASK"
  _pkg_result=0
  if [[ "$IS_RPM_BASED" = 0 ]]; then
    yum -y install glx-utils mesa-dri-drivers xorg-x11-server-Xorg \
                       xorg-x11-utils xorg-x11-xauth xorg-x11-xinit xvattr \
                       xorg*fonts* xterm libXvMC mesa-libxatracker freeglut \
                       gnome-desktop3 gnome-terminal gnome-system-log \
                       gnome-system-monitor nautilus evince gnome-color-manager \
                       gnome-font-viewer gnome-shell gnome-calculator gedit gdm \
                       metacity gnome-session gnome-classic-session \
                       gnome-session-xsession gnu-free-fonts-common \
                       gnu-free-mono-fonts gnu-free-sans-fonts \
                       gnu-free-serif-fonts desktop-backgrounds-gnome && \
    yum -y groupinstall "Xfce"
    _pkg_result=$?
  else
    apt update -y && \
    DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends ubuntu-desktop
    _pkg_result=$?
  fi
  if [ $_pkg_result -ne 0 ]; then
    pipe_log_fail "[ERROR] Cannot install system prerequisites for DCV" "$DCV_INSTALL_TASK"
    return $_pkg_result
  fi

  $CP_PYTHON2_PATH -m pip install $CP_PIP_EXTRA_ARGS flask==1.1.1 Flask-HTTPAuth==3.3.0
  _py_result=$?
  if [ $_py_result -ne 0 ]; then
    pipe_log_fail "[ERROR] Cannot install python prerequisites for DCV" "$DCV_INSTALL_TASK"
    return $_py_result
  fi
}

function install_dcv {
  pipe_log_info "Installing DCV server" "$DCV_INSTALL_TASK"
  _pkg_result=0
  _dcv_distro_url="${CP_CAP_DCV_DISTRO_URL:-"${GLOBAL_DISTRIBUTION_URL}tools/dcv"}"
  if [[ "$IS_RPM_BASED" = 0 ]]; then
    if [[ "$CP_VER" == *"7"* ]]; then
        _NICE_DCV_DISTRIBUTION=nice-dcv-2021.2-11190-el7-x86_64
        rpm --import "$_dcv_distro_url/NICE-GPG-KEY"
        wget "$_dcv_distro_url/${_NICE_DCV_DISTRIBUTION}.tgz" && \
        tar -xvzf ${_NICE_DCV_DISTRIBUTION}.tgz && \
        cd ${_NICE_DCV_DISTRIBUTION} && \
        yum install -y nice-dcv-server-2021.2.11190-1.el7.x86_64.rpm \
                        nice-dcv-web-viewer-2021.2.11190-1.el7.x86_64.rpm \
                        nice-xdcv-2021.2.411-1.el7.x86_64.rpm && \
        systemctl start dbus
        _pkg_result=$?
    fi
  else
    if [[ "$CP_VER" == *"18.04"* ]]; then
      _NICE_DCV_DISTRIBUTION=nice-dcv-2021.2-11190-ubuntu1804-x86_64
      wget "$_dcv_distro_url/NICE-GPG-KEY"
      gpg --import NICE-GPG-KEY
      wget "$_dcv_distro_url/$_NICE_DCV_DISTRIBUTION.tgz" && \
      tar -xvzf $_NICE_DCV_DISTRIBUTION.tgz && cd $_NICE_DCV_DISTRIBUTION && \
      apt install -y ./nice-dcv-server_2021.2.11190-1_amd64.ubuntu1804.deb \
                     ./nice-dcv-web-viewer_2021.2.11190-1_amd64.ubuntu1804.deb \
                     ./nice-xdcv_2021.2.411-1_amd64.ubuntu1804.deb
      _pkg_result=$?
    elif [[  "$CP_VER" == *"20.04"* ]]; then
      _NICE_DCV_DISTRIBUTION=nice-dcv-2021.2-11190-ubuntu2004-x86_64
      wget "$_dcv_distro_url/NICE-GPG-KEY"
      gpg --import NICE-GPG-KEY
      wget "$_dcv_distro_url/$_NICE_DCV_DISTRIBUTION.tgz" && \
      tar -xvzf $_NICE_DCV_DISTRIBUTION.tgz && cd $_NICE_DCV_DISTRIBUTION && \
      apt install -y ./nice-dcv-server_2021.2.11190-1_amd64.ubuntu2004.deb \
                      ./nice-dcv-web-viewer_2021.2.11190-1_amd64.ubuntu2004.deb \
                      ./nice-xdcv_2021.2.411-1_amd64.ubuntu2004.deb
      _pkg_result=$?  
    fi

    if [ $_pkg_result -ne 0 ]; then
      pipe_log_fail "[ERROR] Cannot install DCV itself" "$DCV_INSTALL_TASK"
      return $_pkg_result
    fi

    service dbus start
  fi
  cd ..
  rm -rf "${_NICE_DCV_DISTRIBUTION}*"
  pipe_log_info "DCV successfully installed and configured" "$DCV_INSTALL_TASK"
}

function configure_dcv {
  pipe_log_info "Configuring DCV server" "$DCV_INSTALL_TASK"
  usermod -aG video dcv
  sed -i 's|#authentication="none"|authentication="none"|g' /etc/dcv/dcv.conf
  sed -i -E "s|#web-port=.*|web-port=$CP_DCV_WEB_PORT|g" /etc/dcv/dcv.conf

cat <<EOF >>/etc/dcv/dcv.conf
[clipboard]
primary-selection-copy=true
primary-selection-paste=true
EOF
}

function configure_dcv_extras {
mkdir -p /opt/dcv/extras
cat <<EOF >>/opt/dcv/extras/xfce4launch
#!/bin/bash
mkdir -p ~/.config/xfce4/xfconf/xfce-perchannel-xml
cp /etc/xdg/xfce4/panel/default.xml ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml
startxfce4
EOF
chmod +x /opt/dcv/extras/xfce4launch
}

function run_dcv {
  pipe_log_info "Starting DCV server and waiting for boot up" "$DCV_INSTALL_TASK"
  if [[ "$IS_RPM_BASED" = 0 ]]; then
    systemctl start dcvserver
  else
    nohup dcvserver --service &> /var/log/dcv/server.log &
  fi

  # Wait until dcv server will be ready
  for _RETRY_ITERATION in $(seq 1 "$_RETRIES_COUNT"); do
      curl -k -s "https://localhost:$CP_DCV_WEB_PORT/" &> /dev/null
      _CHECK_RESULT=$?

      if [ $_CHECK_RESULT -ne 0 ]; then
        pipe_log_warn "[WARNING] DCV server is still not running. Try #${_RETRY_ITERATION}." "$DCV_INSTALL_TASK"
        sleep "$_RETRIES_TIMEOUT"
      else
        pipe_log_info "[INFO] DCV server is running. Proceeding." "$DCV_INSTALL_TASK"
        break
      fi
  done

  if [ $_CHECK_RESULT -ne 0 ]; then
      pipe_log_fail "[ERROR] DCV server cannot be run." "$DCV_INSTALL_TASK"
      exit 1
  fi

  # We may want to delay session creation, as the subsequent scripts may want to modify the user's profile
  # Which won't be possible once the session is created and a process is running on the user's behalf
  # So we shall set 'CP_DCV_DELAY_SESSION_CREATION=true' and then call 'nice_dcv_create_session' in the 
  # next execution steps
  if [ "$CP_DCV_DELAY_SESSION_CREATION" == "true" ]; then
    pipe_log_warn "DCV session will NOT be created now as the CP_DCV_DELAY_SESSION_CREATION is set to 'true'. Make sure to run 'nice_dcv_create_session' before the user can login." "$DCV_INSTALL_TASK"
  else
    nice_dcv_create_session
  fi

  # Serve additional server to provide dcv desktop session file
  if [ -n "${CP_DCV_DESKTOP_PORT}" ]; then
      pipe_log_info "Run DCV desktop launcher" "$DCV_INSTALL_TASK"
      nohup "${CP_PYTHON2_PATH}" "${COMMON_REPO_DIR}/scripts/serve_desktop.py" \
          --serving-port "${CP_DCV_DESKTOP_PORT}" \
          --desktop-port "${CP_DCV_WEB_PORT}" \
          --template-path "${COMMON_REPO_DIR}/resources/linux/template.dcv" \
          &> "/var/log/nice_dcv_desktop.log" &
  else
      pipe_log_warn "CP_DCV_DESKTOP_PORT is not set. Desktop endpoint will not work! Use WEB endpoint instead." "$DCV_INSTALL_TASK"
  fi
}

function check_dcv_installation {
  if [[ "$IS_RPM_BASED" = 0 ]]; then
    rpm -qa | grep dcv
  else
    dpkg -l | grep dcv
  fi
}

######################################################
# Check if this is a RPM Linux distribution
######################################################
/usr/bin/rpm -q -f /usr/bin/rpm >/dev/null 2>&1
export IS_RPM_BASED=$?

######################################################
# Check cloud platform
######################################################
if [[ "${CLOUD_PROVIDER}" -ne "AWS" ]]; then
    pipe_log_fail "Cloud ${CLOUD_PROVIDER} is not supported, exiting." "$DCV_INSTALL_TASK"
    exit 1
fi

export CP_DCV_DESKTOP_PORT="${CP_DCV_DESKTOP_PORT:-$CP_CAP_DCV_DESKTOP_PORT}"
if [ -z $CP_DCV_DESKTOP_PORT ]; then
    pipe_log_warn "DCV desktop port is not set (CP_DCV_DESKTOP_PORT). Default 8099 will be used." "$DCV_INSTALL_TASK"
    export CP_DCV_DESKTOP_PORT=8099
fi

export CP_DCV_WEB_PORT="${CP_DCV_WEB_PORT:-$CP_CAP_DCV_WEB_PORT}"
if [ -z $CP_DCV_WEB_PORT ]; then
    pipe_log_warn "DCV web port is not set (CP_DCV_WEB_PORT). Default 8100 will be used." "$DCV_INSTALL_TASK"
    export CP_DCV_WEB_PORT=8100
fi
check_dcv_installation
IS_DCV_INSTALLED=$?

if [ $IS_DCV_INSTALLED -eq 0 ]; then
   pipe_log_info "--> DCV installed already" "$DCV_INSTALL_TASK"
else
   install_prerequisites && \
   install_dcv && \
   configure_dcv && \
   configure_dcv_extras

   if [ $? -ne 0 ]; then
    pipe_log_fail "[ERROR] DCV installation failed. Exiting" "$DCV_INSTALL_TASK"
    exit 1
   fi
fi

run_dcv
pipe_log_success "[INFO] DCV server is ready." "$DCV_INSTALL_TASK"
