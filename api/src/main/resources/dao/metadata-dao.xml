<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean class="com.epam.pipeline.dao.metadata.MetadataDao" id="metadataDao" autowire="byName">
        <property name="createMetadataItemQuery">
            <value>
                <![CDATA[
                    INSERT INTO pipeline.metadata (
                        entity_id,
                        entity_class,
                        data)
                    VALUES (
                        :ENTITY_ID,
                        :ENTITY_CLASS,
                        to_jsonb(:DATA::jsonb))
                ]]>
            </value>
        </property>
        <property name="uploadMetadataItemQuery">
            <value>
                <![CDATA[
                    UPDATE pipeline.metadata SET
                        data = to_jsonb(:DATA::jsonb)
                    WHERE
                        entity_id = :ENTITY_ID
                    AND
                        entity_class = :ENTITY_CLASS
                ]]>
            </value>
        </property>
        <property name="uploadMetadataItemKeyQuery">
            <value>
                <![CDATA[
                    UPDATE pipeline.metadata SET
                        data = jsonb_set(data, :KEY::text[], :VALUE::jsonb, true)
                    WHERE
                        entity_id = :ENTITY_ID
                    AND
                        entity_class = :ENTITY_CLASS
                ]]>
            </value>
        </property>
        <property name="loadMetadataItemQuery">
            <value>
                <![CDATA[
                    (
                        SELECT
                            m.entity_id,
                            m.entity_class,
                            m.data
                        FROM pipeline.metadata AS m
                        WHERE m.entity_id = :ENTITY_ID
                        AND m.entity_class = :ENTITY_CLASS
                    )
                    UNION
                    (
                        SELECT
                            t.id AS entity_id,
                            m.entity_class,
                            m.data
                        FROM pipeline.metadata AS m
                        JOIN pipeline.tool tl ON tl.id = m.entity_id
                        JOIN pipeline.tool t ON t.link = tl.id
                        WHERE t.id = :ENTITY_ID
                        AND m.entity_class = :ENTITY_CLASS
                    )
                ]]>
            </value>
        </property>
        <property name="loadMetadataKeysQuery">
            <value>
                <![CDATA[
                    SELECT DISTINCT jsonb_object_keys(data) as key
                    FROM pipeline.metadata as m
                    WHERE m.entity_class = ?
                ]]>
            </value>
        </property>
        <property name="loadMetadataItemsQuery">
            <value>
                <![CDATA[
                    (
                        SELECT
                            m.entity_id,
                            m.entity_class,
                            m.data
                        FROM pipeline.metadata AS m
                        WHERE (m.entity_id, m.entity_class) IN (@ENTITIES@)
                    )
                    UNION
                    (
                        SELECT
                            t.id AS entity_id,
                            m.entity_class,
                            m.data
                        FROM pipeline.metadata AS m
                        JOIN pipeline.tool tl ON tl.id = m.entity_id
                        JOIN pipeline.tool t ON t.link = tl.id
                        WHERE (t.id, m.entity_class) in (@ENTITIES@)
                    )
                ]]>
            </value>
        </property>
        <property name="loadMetadataItemsWithIssuesQuery">
            <value>
                <![CDATA[
                    (
                        SELECT
                            COALESCE(m.entity_id, i.entity_id) AS entity_id,
                            COALESCE(m.entity_class, i.entity_class) AS entity_class,
                            m.data,
                            count(i.issue_id) AS issues_count
                        FROM pipeline.metadata AS m
                        FULL OUTER JOIN issue AS i ON i.entity_id = m.entity_id AND i.entity_class = m.entity_class
                        WHERE (m.entity_id, m.entity_class) IN (@ENTITIES@)
                        OR (i.entity_id, i.entity_class) IN (@ENTITIES@)
                        GROUP BY m.entity_id, m.entity_class, m.data, i.entity_id, i.entity_class
                    )
                    UNION
                    (
                        SELECT
                            t.id AS entity_id,
                            m.entity_class,
                            m.data,
                            count(i.issue_id) AS issues_count
                        FROM pipeline.metadata AS m
                        JOIN issue AS i ON i.entity_id = m.entity_id AND i.entity_class = m.entity_class
                        JOIN pipeline.tool tl ON tl.id = m.entity_id
                        JOIN pipeline.tool t ON t.link = tl.id
                        WHERE (t.id, m.entity_class) IN (@ENTITIES@)
                        GROUP BY t.id, m.entity_class, m.data
                    )
                ]]>
            </value>
        </property>
        <property name="deleteMetadataItemQuery">
            <value>
                <![CDATA[
                    DELETE FROM
                        pipeline.metadata
                    WHERE
                        entity_id = ?
                    AND
                        entity_class = ?
                ]]>
            </value>
        </property>
        <property name="deleteMetadataItemKeyQuery">
            <value>
                <![CDATA[
                    UPDATE pipeline.metadata SET
                        data = data - @KEY@
                    WHERE
                        entity_id = :ENTITY_ID
                    AND
                        entity_class = :ENTITY_CLASS
                ]]>
            </value>
        </property>
        <property name="searchMetadataByClassAndKeyValueQuery">
            <value>
                <![CDATA[
                    SELECT
                        m.entity_id,
                        m.entity_class
                    FROM
                        pipeline.metadata m
                    WHERE
                        m.entity_class = ?
                    AND
                        m.data @> CAST(? AS jsonb)
                ]]>
            </value>
        </property>
        <property name="loadUniqueValuesFromEntitiesAttributes">
            <value>
                <![CDATA[
                    SELECT DISTINCT data -> :KEY -> :VALUE AS data FROM pipeline.metadata WHERE entity_class = :ENTITY_CLASS
                ]]>
            </value>
        </property>
        <property name="createMetadataDictionary">
            <value>
                <![CDATA[
                    SELECT DISTINCT _metadata.key AS key, trim(_metadata_details.value::text, '"') as value
                    FROM pipeline.metadata
                    CROSS JOIN LATERAL jsonb_each(data) _metadata
                    CROSS JOIN LATERAL jsonb_each(value) _metadata_details
                    WHERE _metadata_details.key='value' and _metadata.key NOT IN (:list)
                ]]>
            </value>
        </property>
    </bean>
</beans>
