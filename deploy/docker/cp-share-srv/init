#!/bin/bash

# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

export CP_DOLLAR='$'

# Validate SSO and SSL certificates
if [ -z "$CP_SHARE_SRV_CERT_DIR" ]; then
    export CP_SHARE_SRV_CERT_DIR="/opt/share-srv/pki"
fi

if [ ! -f "$CP_SHARE_SRV_CERT_DIR/cp-share-srv-ssl.p12" ]; then
    echo "SSL p12 key pair not found at $CP_SHARE_SRV_CERT_DIR/cp-share-srv-ssl.p12, but it is required to setup HTTPS for the Share Service. Exiting"
    exit 1
fi

if [ ! -f "$CP_SHARE_SRV_CERT_DIR/cp-share-srv-sso.p12" ]; then
    echo "SSO p12 key pair not found at $CP_SHARE_SRV_CERT_DIR/cp-share-srv-sso.p12, but it is required to setup Single Sign-On for the Share Service. Exiting"
    exit 1
fi


# Validate SSO Federation metadata

if [ -z "$CP_SHARE_SRV_FED_META_DIR" ]; then
    export CP_SHARE_SRV_FED_META_DIR="/opt/share-srv/sso"
fi

if [ ! -f "$CP_SHARE_SRV_FED_META_DIR/cp-share-srv-fed-meta.xml" ]; then
    echo "SSO Metadata not found at $CP_SHARE_SRV_FED_META_DIR/cp-share-srv-fed-meta.xml, but it is required to setup Single Sign-On for the Share Service. Exiting"
    exit 1
fi

if [ -z "${CP_SHARE_SRV_SAML_ENDPOINT_ID}" ]; then
    echo "Share Service SAML endpoint ID is not set explicitly. Building endpoint from HOST and PORT settings"
    export CP_SHARE_SRV_SAML_ENDPOINT_ID="https://${CP_SHARE_SRV_EXTERNAL_HOST}:${CP_SHARE_SRV_EXTERNAL_PORT}${CP_SHARE_SRV_SAML_ID_TRAIL:-/proxy}"
fi

mkdir -p $CP_SHARE_HOME/keystore/

# Import SSL cert
keytool -importkeystore -deststorepass changeit \
        -destkeypass changeit \
        -destkeystore $CP_SHARE_HOME/keystore/store.jks \
        -srckeystore $CP_SHARE_SRV_CERT_DIR/cp-share-srv-ssl.p12 \
        -srcstoretype PKCS12 \
        -srcstorepass changeit \
        -alias ssl \
        -noprompt

if [ $? -ne 0 ]; then
    echo "An error occured while importing SSL p12 key pair $CP_SHARE_SRV_CERT_DIR/cp-share-srv-ssl.p12 into the Share Service. Exiting"
    exit 1
fi

# Import SSO cert
keytool -importkeystore -deststorepass changeit \
        -destkeypass changeit \
        -destkeystore $CP_SHARE_HOME/keystore/store.jks \
        -srckeystore $CP_SHARE_SRV_CERT_DIR/cp-share-srv-sso.p12 \
        -srcstoretype PKCS12 \
        -srcstorepass changeit \
        -alias sso \
        -noprompt

if [ $? -ne 0 ]; then
    echo "An error occured while importing SSO p12 key pair $CP_SHARE_SRV_CERT_DIR/cp-share-srv-sso.p12 into the Share Service. Exiting"
    exit 1
fi

ca_cert_path="$CP_COMMON_CERT_DIR/ca-public-cert.pem"
if [ -f "$ca_cert_path" ]; then
    echo "Importing CA cert into global java keystore"
    /update-trust $ca_cert_path "cp-ca"
fi

echo "Importing SHARE SSL cert into global java keystore"
/update-trust $CP_SHARE_SRV_CERT_DIR/ssl-public-cert.pem "cp-share-srv"

CP_SHARE_SRV_IDP_CERT_PATH="${CP_SHARE_SRV_IDP_CERT_PATH:-$CP_IDP_CERT_DIR}"
IDP_CERT_PATH=$CP_SHARE_SRV_IDP_CERT_PATH/idp-public-cert.pem
echo "Importing IdP signing cert into Share keystore from $IDP_CERT_PATH"
keytool  -import \
         -keystore $CP_SHARE_HOME/keystore/store.jks \
         -storepass changeit \
         -noprompt \
         -alias idp \
         -file $IDP_CERT_PATH


# Configure logging and launch
SHARE_RUN_TIME_LOG=$CP_SHARE_HOME/logs/runtime.log
mkdir -p $(dirname $SHARE_RUN_TIME_LOG)
touch $SHARE_RUN_TIME_LOG

nohup java $CP_SHARE_SRV_JAVA_OPTS -jar data-sharing-service.jar &> $SHARE_RUN_TIME_LOG &
APP_PID="$!"

sleep 5

# Workaround the container hanging when being terminated
function sig_handler {
    echo "Got SIGTERM, stopping PID $APP_PID and exiting"
    if [ $APP_PID -ne 0 ]; then
        kill -SIGTERM "$APP_PID"
        wait "$APP_PID"
    fi
    exit 143
}
trap 'kill $! ; sig_handler' SIGTERM
tail -F $SHARE_RUN_TIME_LOG &
wait "$!"
