#!/usr/bin/env bash

# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_CURRENT_EXEC_NODE_NAME=$1
_SGE_RESOURCES_SETUP_TASK=$2
_NODE_CPU_COUNT=$3

function configure_consumable_sge_resource {
    RESOURCE_NAME="$1"
    RESOURCE_TYPE="$2"
    RESOURCE_DEFAULT="$3"
    RESOURCE_VALUE="$4"
    RESOURCE_CONSUMABLE_TYPE="$5"

    # Add consumable resource if it is master node, this shall be done once
    if [[ "$cluster_role" = "master" ]]; then
        add_consumable_sge_resource "$RESOURCE_NAME" "$RESOURCE_TYPE" "$RESOURCE_DEFAULT" "$RESOURCE_CONSUMABLE_TYPE"
    fi

    # Add consumable resource capacity for a current execution host
    add_sge_resource_capacity "$RESOURCE_NAME" "$RESOURCE_VALUE"
}

function add_consumable_sge_resource {
    RESOURCE_NAME="$1"
    RESOURCE_TYPE="$2"
    RESOURCE_DEFAULT="$3"
    RESOURCE_CONSUMABLE_TYPE="$4"

    _CONFIG_FILE=/tmp/complex_${_CURRENT_EXEC_NODE_NAME}.txt
    qconf -sc > "$_CONFIG_FILE"
    # First remove any line, which start with the resource name, in case it already exists
    # Otherwise - resource won't be added/modified
    sed -i "/^$RESOURCE_NAME /d" "$_CONFIG_FILE"
    echo "$RESOURCE_NAME $RESOURCE_NAME $RESOURCE_TYPE <= YES $RESOURCE_CONSUMABLE_TYPE $RESOURCE_DEFAULT 0" >> "$_CONFIG_FILE"
    qconf -Mc "$_CONFIG_FILE"
    rm "$_CONFIG_FILE"
    pipe_log_info "Added GridEngine consumable resource: $RESOURCE_NAME" "$_SGE_RESOURCES_SETUP_TASK"
}

function add_sge_resource_capacity {
    RESOURCE_NAME="$1"
    RESOURCE_VALUE="$2"

    qconf -aattr exechost complex_values "$RESOURCE_NAME=$RESOURCE_VALUE" "$_CURRENT_EXEC_NODE_NAME"
    pipe_log_info "Added $RESOURCE_NAME=$RESOURCE_VALUE for $_CURRENT_EXEC_NODE_NAME execution host" "$_SGE_RESOURCES_SETUP_TASK"
}

if [[ -z "$_SGE_RESOURCES_SETUP_TASK" ]]; then
    _SGE_RESOURCES_SETUP_TASK="SGESetupResources"
fi

if [[ -z "$_CURRENT_EXEC_NODE_NAME" ]]; then
    pipe_log_info "Execution node name is not set, using ${HOSTNAME}" "$_SGE_RESOURCES_SETUP_TASK"
    _CURRENT_EXEC_NODE_NAME="$HOSTNAME"
fi

#
# Setup GPU, RAM, CPU consumable resources for a current node
#
_NODE_GPUS_COUNT=$(nvidia-smi -L 2>/dev/null | wc -l)
_NODE_GPUS_COUNT="${_NODE_GPUS_COUNT:-0}"
CP_CAP_GE_CONSUMABLE_RESOURCE_NAME_GPU=${CP_CAP_GE_CONSUMABLE_RESOURCE_NAME_GPU:-gpus}
pipe_log_info "$_NODE_GPUS_COUNT GPUs found" "$_SGE_RESOURCES_SETUP_TASK"

if (( _NODE_GPUS_COUNT > 0 )) && check_cp_cap "CP_CAP_SGE_GPU_EXCLUSIVE_MODE"; then
    nvidia-smi -e 0
    nvidia-smi -c 3
    nvidia-smi -pm 1
    pipe_log_info "GPUs are set to exclusive mode via CP_CAP_SGE_GPU_EXCLUSIVE_MODE" "$_SGE_RESOURCES_SETUP_TASK"
fi

_NODE_RAM_COUNT=$(grep MemTotal /proc/meminfo | awk '{print int($2 / (1024 * 1024)) "G"}')
CP_CAP_GE_CONSUMABLE_RESOURCE_NAME_RAM=${CP_CAP_GE_CONSUMABLE_RESOURCE_NAME_RAM:-ram}
pipe_log_info "$_NODE_RAM_COUNT RAM found" "$_SGE_RESOURCES_SETUP_TASK"

if [ -z "$_NODE_CPU_COUNT" ]; then
    _NODE_CPU_COUNT=$(nproc)
fi
# Using "n_cpu", which is a number of available CPUs == slots, instead of "cpu" here as:
#   "cpu" is a "built in" resource
#   It is automatically calculated, based on the real cpu utilization in %% (reported by the "load_values"), e.g.:
# ```
# $ qconf -se pipeline-46089
# hostname              pipeline-46089
# complex_values        ram=7G
# load_values           load_avg=10.740000,load_short=10.620000, \
#                       ...
#                       virtual_used=1466.832031M,cpu=100.000000
# ```
CP_CAP_GE_CONSUMABLE_RESOURCE_NAME_CPU=${CP_CAP_GE_CONSUMABLE_RESOURCE_NAME_CPU:-n_cpu}
pipe_log_info "$_NODE_CPU_COUNT CPUs found" "$_SGE_RESOURCES_SETUP_TASK"

pipe_log_info "Starting GridEngine resources configuration..." "$_SGE_RESOURCES_SETUP_TASK"

# Changed consumable type of the "n_cpu" and "gpus" resources to "JOB" (see http://www.softpanorama.org/HPC/Grid_engine/Resources/sge_consumable_resources.shtml)
# If it is set to "YES", the resource request is multiplied by "slots"
# So we if we run "qsub -pe local 3 -l n_cpu=3", it will require 3*3=9 n_cpu per job
# For the "ram" resource, keeping it as "YES", as it makes sense to request this resource per slot

# For the CPU-only nodes, we still add "gpus" resource with value "0", so that the scripts do not fail if the request "-l gpus=N"
configure_consumable_sge_resource "$CP_CAP_GE_CONSUMABLE_RESOURCE_NAME_GPU" "INT" "0" "$_NODE_GPUS_COUNT" "JOB"
configure_consumable_sge_resource "$CP_CAP_GE_CONSUMABLE_RESOURCE_NAME_RAM" "MEMORY" "0G" "$_NODE_RAM_COUNT" "YES"
configure_consumable_sge_resource "$CP_CAP_GE_CONSUMABLE_RESOURCE_NAME_CPU" "INT" "0" "$_NODE_CPU_COUNT" "JOB"

pipe_log_success "Finished GridEngine resources configuration" "$_SGE_RESOURCES_SETUP_TASK"
