#!/bin/bash
# Copyright 2017-2024 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

CP_TP_HTTP_PROXY_ENABLED="${CP_TP_HTTP_PROXY_ENABLED:-true}"
CP_TP_STREAM_PROXY_ENABLED="${CP_TP_STREAM_PROXY_ENABLED:-true}"

CP_TP_NODE_NAME="${MY_NODE_NAME:-$(hostname)}"
CP_TP_LOGS_DIR="/opt/tinyproxy/logs/$CP_TP_NODE_NAME"

mkdir -p "$CP_TP_LOGS_DIR"
mkdir -p /var/run/tinyproxy

########################
# TinyProxy config
########################
CP_TP_ALLOWED_CIDR="${CP_TP_ALLOWED_CIDR:-10.244.0.0/16}"
CP_TP_INTERNAL_PORT="${CP_TP_INTERNAL_PORT:-3128}"
CP_TP_VIA_NAME="${CP_PREF_UI_PIPELINE_DEPLOYMENT_NAME:-CloudPipeline}-tinyproxy"
CP_TP_CONFIG_PATH="${CP_TP_CONFIG_PATH:-/opt/tinyproxy/tinyproxy.conf}"
CP_TP_FILTER_PATH="${CP_TP_FILTER_PATH:-$(dirname $CP_TP_CONFIG_PATH)/filter.conf}"
CP_TP_TIMEOUT="${CP_TP_TIMEOUT:-60}"
CP_TP_LOG_LEVEL="${CP_TP_LOG_LEVEL:-Error}"

CP_TP_MAX_CLIENTS="${CP_TP_MAX_CLIENTS:-100}"

cat > "$CP_TP_CONFIG_PATH" <<EOF
User root
Group root

Port $CP_TP_INTERNAL_PORT
Listen 0.0.0.0
BindSame yes
Timeout $CP_TP_TIMEOUT

DefaultErrorFile "$CP_TP_LOGS_DIR/default.html"
StatFile "/opt/tinyproxy/stats.json"
Logfile "$CP_TP_LOGS_DIR/tinyproxy.log"
LogLevel $CP_TP_LOG_LEVEL
PidFile "/var/run/tinyproxy/tinyproxy.pid"

MaxClients $CP_TP_MAX_CLIENTS

Allow $CP_TP_ALLOWED_CIDR

ViaProxyName "$CP_TP_VIA_NAME"
EOF

if [ "$CP_TP_ALLOWED_PORTS" ]; then
    echo "ConnectPort $CP_TP_ALLOWED_PORTS" >> "$CP_TP_CONFIG_PATH"
fi

if [ "$CP_TP_UPSTREAM" ]; then
    echo "Upstream http $CP_TP_UPSTREAM" >> "$CP_TP_CONFIG_PATH"
fi

if [ "$CP_TP_ALLOWED_DESTINATION" ]; then
    echo "Setting proxy allowed destinations"
    IFS=',' read -ra _allowed_dests <<< "$CP_TP_ALLOWED_DESTINATION"
    for _d in "${_allowed_dests[@]}"; do
        echo "$_d" >> $CP_TP_FILTER_PATH
        echo "Entry added: $_d"
    done
    echo "FilterDefaultDeny Yes" >> "$CP_TP_CONFIG_PATH"
    echo "Filter \"$CP_TP_FILTER_PATH\"" >> "$CP_TP_CONFIG_PATH"
fi

if [ "$CP_TP_RESTRICTED_DESTINATION" ]; then
    if [ "$CP_TP_ALLOWED_DESTINATION" ]; then
        echo "CP_TP_RESTRICTED_DESTINATION cannot be mixed with CP_TP_ALLOWED_DESTINATION ('allowed' destinations take precedence)"
    else
        echo "Setting proxy restricted destinations"
        IFS=',' read -ra _restricted_dests <<< "$CP_TP_RESTRICTED_DESTINATION"
        for _d in "${_restricted_dests[@]}"; do
            echo "$_d" >> $CP_TP_FILTER_PATH
            echo "Entry added: $_d"
        done
        echo "FilterDefaultDeny No" >> "$CP_TP_CONFIG_PATH"
        echo "Filter \"$CP_TP_FILTER_PATH\"" >> "$CP_TP_CONFIG_PATH"
    fi
fi

if [ "$CP_TP_HTTP_PROXY_ENABLED" == "true" ]; then
    echo "Starting tinyproxy"
    tinyproxy -c "$CP_TP_CONFIG_PATH"
else
    echo "CP_TP_HTTP_PROXY_ENABLED is set to $CP_TP_HTTP_PROXY_ENABLED, tinyproxy is disabled"
fi

#################################
# Nginx (TCP/UDP forward) config
#################################
function nginx_add_proxy_entry {
    local _entry_spec="$1"
    local _entry_protocol="$2"

    echo "-"
    echo "Processing entry: $_entry_spec"
    echo "Protocol: $_entry_protocol"

    if [ "$_entry_protocol" == "tcp" ]; then
        _entry_protocol=
    fi

    IFS=',' read -ra _hosts <<< "$_entry_spec"
    for _h in "${_hosts[@]}"; do
        IFS=':' read -ra _host_port <<< "$_h"
        _source_port="${_host_port[0]}"
        _dest_host="${_host_port[1]}"
        _dest_port="${_host_port[2]}"
        _extra="${_host_port[3]}"
        if  [ -z "$_source_port" ] || \
            [ -z "$_dest_host" ] || \
            [ -z "$_dest_port" ]; then
            echo "Invalid entry format, skipping"
            continue
        fi

        if [ "$_entry_protocol" == "smtp" ]; then
            if [ -z "$_extra" ]; then
                _extra="_"
            fi
cat > "${CP_TP_NGINX_SMTP_CONFIGS}/${_dest_host}_${_source_port}.conf"<<EOF
    server {
            auth_http        http://127.0.0.1:${CP_TP_NGINX_SMTP_AUTH_SRV_PORT};
            server_name      ${_extra};
            auth_http_header X-Target-Server "${_dest_host}";
            auth_http_header X-Target-Port "${_dest_port}";
            listen           ${_source_port};
            protocol         smtp;
            smtp_auth        none;
            xclient          off;
    }
EOF
        else
            if ! [[ $_dest_host =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "Host $_dest_host is not an IP - adding it to a map"
cat > "${CP_TP_NGINX_DNS_MAPS}/${_dest_host}_${_source_port}.conf" <<EOF
map \$remote_addr \$backend$_source_port {
    default $_dest_host;
}
EOF
                _dest_host="\$backend$_source_port"
            fi

            echo "server { listen ${_source_port} ${_entry_protocol}; proxy_pass ${_dest_host}:${_dest_port}; }" >> "$CP_TP_NGINX_CONFIG"
            echo "Entry added: ${_source_port}->${_dest_host}:${_dest_port}"
        fi
    done

    echo "-"
}

CP_TP_NGINX_CONFIG="${CP_TP_NGINX_CONFIG:-/etc/nginx/nginx.conf}"
CP_TP_NGINX_DNS_MAPS="${CP_TP_NGINX_DNS_MAPS:-/etc/nginx/maps}"
CP_TP_NGINX_SMTP_CONFIGS="${CP_TP_NGINX_SMTP_CONFIGS:-/etc/nginx/smtp}"
mkdir -p /opt/tinyproxy/nginx/logs
mkdir -p $CP_TP_NGINX_DNS_MAPS
mkdir -p $CP_TP_NGINX_SMTP_CONFIGS

CP_TP_CLUSTER_RESOLVER="${CP_TP_CLUSTER_RESOLVER:-$CP_PREF_CLUSTER_PROXIES_DNS_POST}"
if [ -z "$CP_TP_CLUSTER_RESOLVER" ]; then
    export CP_TP_CLUSTER_RESOLVER="10.96.0.10"
    echo "Cluster resolver is NOT set by CP_TP_CLUSTER_RESOLVER and CP_PREF_CLUSTER_PROXIES_DNS_POST, defaulting to $CP_TP_CLUSTER_RESOLVER"
fi

CP_TP_NGINX_ACCESS_LOG="${CP_TP_NGINX_ACCESS_LOG:-false}"
CP_TP_NGINX_ACCESS_LOG_DISABLED="access_log off;"
if [ "$CP_TP_NGINX_ACCESS_LOG" == "true" ]; then
    CP_TP_NGINX_ACCESS_LOG_DISABLED=""
fi

CP_TP_NGINX_LOG_DIR="${CP_TP_NGINX_LOG_DIR:-$CP_TP_LOGS_DIR/stream}"
mkdir -p "$CP_TP_NGINX_LOG_DIR"

export CP_TP_NGINX_SMTP_AUTH_SRV_LOG_FILE="${CP_TP_NGINX_SMTP_AUTH_SRV_LOG_FILE:-/var/log/smtp-auth-srv.log}"
mkdir -p $(dirname $CP_TP_NGINX_SMTP_AUTH_SRV_LOG_FILE)

export CP_TP_NGINX_SMTP_AUTH_SRV_PORT="${CP_TP_NGINX_SMTP_AUTH_SRV_PORT:-8000}"

if [ "$CP_TP_TCP_DEST" ] || [ "$CP_TP_UDP_DEST" ] || [ "$CP_TP_SMTP_DEST" ]; then

# Add general nginx config
cat > "$CP_TP_NGINX_CONFIG" <<EOF
user nginx;
worker_processes auto;
error_log $CP_TP_NGINX_LOG_DIR/error.log;
pid /run/nginx.pid;

include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

mail {
    include $CP_TP_NGINX_SMTP_CONFIGS/*.conf;
}

stream {
    log_format basic '\$remote_addr [\$time_local] '
                    '\$protocol \$status \$bytes_sent \$bytes_received '
                    '\$session_time "\$upstream_addr" '
                    '"\$upstream_bytes_sent" "\$upstream_bytes_received" "\$upstream_connect_time"';

    access_log $CP_TP_NGINX_LOG_DIR/access.log basic;
    $CP_TP_NGINX_ACCESS_LOG_DISABLED

    resolver $CP_TP_CLUSTER_RESOLVER;
    resolver_timeout 5s;
    include $CP_TP_NGINX_DNS_MAPS/*.conf;
EOF

echo "Adding nginx tcp/udp forward entries"

# CP_TP_TCP_DEST and CP_TP_UDP_DEST shall contain the specs in the following format:
# SRC_PORT1:DEST_HOST1:DEST_PORT1,SRC_PORT2:DEST_HOST2:DEST_PORT2
# - SRC_PORTx - will listen on this port
# - DEST_HOSTx - will forward traffic to this host
# - DEST_PORTx - will forward traffic to this port on DEST_HOSTx
if [ "$CP_TP_TCP_DEST" ]; then
    nginx_add_proxy_entry "$CP_TP_TCP_DEST" "tcp"
fi
if [ "$CP_TP_UDP_DEST" ]; then
    nginx_add_proxy_entry "$CP_TP_UDP_DEST" "udp"
fi
if [ "$CP_TP_SMTP_DEST" ]; then
    nginx_add_proxy_entry "$CP_TP_SMTP_DEST" "smtp"
    # Start nginx smtp auth server: http://nginx.org/en/docs/mail/ngx_mail_auth_http_module.html
    nohup /opt/miniconda/envs/auth-srv/bin/python /opt/smtp/smtp-auth-srv.py &> "$CP_TP_NGINX_SMTP_AUTH_SRV_LOG_FILE" &
    # Run Filebeat
    envsubst < /etc/filebeat/filebeat-template.yml > /etc/filebeat/filebeat.yml
    nohup filebeat &
fi

# Add general nginx footer
echo " }" >> "$CP_TP_NGINX_CONFIG"

echo "Done adding nginx tcp/udp forward entries"

if [ "$CP_TP_STREAM_PROXY_ENABLED" == "true" ]; then
    echo "Starting nginx stream proxy"
    nginx
else
    echo "CP_TP_STREAM_PROXY_ENABLED is set to $CP_TP_STREAM_PROXY_ENABLED, nginx stream proxy is disabled"
fi

fi

# Just wait on
sleep infinity
