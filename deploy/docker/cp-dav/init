#!/bin/bash

# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Setup defaults for the env vars and validate
export CP_DAV_INTERNAL_PORT="${CP_DAV_INTERNAL_PORT:-31085}"
export CP_DAV_URL_PATH="${CP_DAV_URL_PATH:-webdav}"
export CP_DAV_SERVE_DIR="${CP_DAV_SERVE_DIR:-/dav-serve}"
export CP_DAV_MOUNT_POINT="${CP_DAV_MOUNT_POINT:-/dav-mount}"
export APACHE_LOG_DIR="${APACHE_LOG_DIR:-/var/log/dav/httpd}"
export SYNC_LOG_DIR="${SYNC_LOG_DIR:-/var/log/dav/sync}"
export APACHE_DAV_LOCK_DB="${APACHE_DAV_LOCK_DB:-$APACHE_HOME/dav/DavLock}"

function download_file {
    local _FILE_URL=$1
    echo "Downloading ${_FILE_URL}"
    wget -q --no-check-certificate ${_FILE_URL} 2>/dev/null || curl -s -k -O ${_FILE_URL}
    _DOWNLOAD_RESULT=$?
    return "$_DOWNLOAD_RESULT"
}

if [ -z "$API" ] && ([ -z "$CP_API_SRV_INTERNAL_HOST" ] || [ -z "$CP_API_SRV_INTERNAL_PORT" ]); then
    echo "$API is not set, and we cannot construct it as $CP_API_SRV_INTERNAL_HOST or $CP_API_SRV_INTERNAL_PORT are not set as well, exiting"
    exit 1
fi
export API="${API:-https://${CP_API_SRV_INTERNAL_HOST}:${CP_API_SRV_INTERNAL_PORT}/pipeline/restapi/}"

if [ -z "$API_TOKEN" ] && [ -z "$CP_API_JWT_ADMIN" ]; then
    echo "API_TOKEN is empty and cannot be initialized from CP_API_JWT_ADMIN, exiting"
    exit 1
fi
export API_TOKEN="${API_TOKEN:-$CP_API_JWT_ADMIN}"

export DISTRIBUTION_URL="${DISTRIBUTION_URL:-https://${CP_API_SRV_INTERNAL_HOST}:${CP_API_SRV_INTERNAL_PORT}/pipeline/pipe.tar.gz}"
download_file "${DISTRIBUTION_URL}"

if [ $? -eq 0 ]; then
      echo "'pipe' CLI download succeeded."
      mv pipe.tar.gz /opt/ && \
      cd /opt && \
      tar -zxf pipe.tar.gz && \
      rm -rf pipe.tar.gz && \
      ln -s /opt/pipe/pipe /usr/bin/pipe
      if [ $? -eq 0 ]; then
        pipe configure --auth-token "$API_TOKEN" --api "${API}" --timezone local --proxy ''
      fi
fi

# Create the required directories
mkdir -p "$CP_DAV_SERVE_DIR" "$CP_DAV_MOUNT_POINT" "$APACHE_LOG_DIR" "$SYNC_LOG_DIR"
mkdir -p $(dirname $APACHE_DAV_LOCK_DB)

# Persist environment for a cron job
env > $SYNC_HOME/env.sh
envsubst < /tmp/sync > /etc/cron.d/sync
chmod 0644 /etc/cron.d/sync
rm -f /tmp/sync

# Start cron
crond

# Update the Apache WebDAV configuration according to the environment variables
envsubst < /tmp/httpd.conf > ${APACHE_HOME}/conf/httpd.conf
envsubst < /tmp/webdav.conf > ${APACHE_HOME}/conf/extra/webdav.conf
rm -rf /tmp/*.conf

# Apache shall use 0002 mask to allow owner and group rw access
umask ${CP_DAV_UMASK:-0002}

# Start Apache in the foreground
${APACHE_HOME}/bin/apachectl -DFOREGROUND
