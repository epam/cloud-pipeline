#!/bin/bash

# Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

function copy_pub_pem {
    local from="$1"
    local to="$2"

    jwt_public_key=$(<$from)
    if [[ "$jwt_public_key" != "-----BEGIN PUBLIC KEY-----"* ]]; then
        echo "JWT Public key ($from) does not start with \"-----BEGIN PUBLIC KEY-----\", adding PEM prefix and suffix"
        echo "-----BEGIN PUBLIC KEY-----" > "$to"
        echo "$jwt_public_key" >> "$to"
        echo "-----END PUBLIC KEY-----" >> "$to"
    else
        \cp "$from" "$to"
    fi
}

# Init required variables and validate
if [ -z "$API" ]; then
    export API="https://${CP_API_SRV_INTERNAL_HOST}:${CP_API_SRV_INTERNAL_PORT}/pipeline/restapi/"
fi

if [ -z "$API_TOKEN" ] && [ "$CP_API_JWT_ADMIN" ]; then
    export API_TOKEN="${CP_API_JWT_ADMIN}"
elif [ -z "$CP_API_JWT_ADMIN" ]; then
    echo "API_TOKEN is empty and cannot be initialized from CP_API_JWT_ADMIN, exiting"
    exit 1
fi

# Check that jwt pub key exists and check it's PEM format (pub key is required to authenticate client's JWT tokens, while accessing SSH or interactive endpoints)
export JWT_PUB_KEY="${JWT_PUB_KEY:-/etc/nginx/jwt-public-key.pem}"
CP_API_SRV_JWT_PUBLIC_KEY="$CP_API_SRV_CERT_DIR/jwt.key.public"
if [ ! -f "$JWT_PUB_KEY" ]; then
    echo "JWT Public key is not found at $JWT_PUB_KEY, trying to find it at other known locations"
    if [ -f "$CP_API_SRV_JWT_PUBLIC_KEY" ]; then
        mkdir -p $(dirname $JWT_PUB_KEY)
        copy_pub_pem $CP_API_SRV_JWT_PUBLIC_KEY $JWT_PUB_KEY
    else
        echo "JWT Public key is not found at $CP_API_SRV_JWT_PUBLIC_KEY as well, exiting"
        exit 1
    fi
fi

# Replace well-know environment variables placeholders in the assets
export CP_EDGE_WEB_CLIENT_MAX_SIZE="${CP_EDGE_WEB_CLIENT_MAX_SIZE:-500M}"
export CP_EDGE_CLUSTER_RESOLVER="${CP_EDGE_CLUSTER_RESOLVER:-$CP_PREF_CLUSTER_PROXIES_DNS_POST}"
if [ -z "$CP_EDGE_CLUSTER_RESOLVER" ]; then
    export CP_EDGE_CLUSTER_RESOLVER="10.96.0.10"
    echo "Cluster resolve is NOT set by CP_EDGE_CLUSTER_RESOLVER and CP_PREF_CLUSTER_PROXIES_DNS_POST, defaulting to $CP_EDGE_CLUSTER_RESOLVER"
fi
export CP_EDGE_CLUSTER_RESOLVER_TIMEOUT_SEC="${CP_EDGE_CLUSTER_RESOLVER_TIMEOUT_SEC:-10}"
export CP_PREF_STORAGE_FSBROWSER_PORT="${CP_PREF_STORAGE_FSBROWSER_PORT:-8091}"
export CP_DAV_URL_PATH="${CP_DAV_URL_PATH:-webdav}"
export CP_DAV_INTERNAL_HOST="${CP_DAV_INTERNAL_HOST:-127.0.0.1}"
export CP_DAV_INTERNAL_PORT="${CP_DAV_INTERNAL_PORT:-31085}"
export CP_DAV_EXTRA_INTERNAL_PORT="${CP_DAV_EXTRA_INTERNAL_PORT:-31086}"
export CP_DAV_AUTH_URL_PATH="${CP_DAV_AUTH_URL_PATH:-webdav/auth-sso}"
export CP_DAV_EXTERNAL_MAPPING_URL="${CP_DAV_EXTERNAL_MAPPING_URL:-$EDGE_EXTERNAL_SCHEMA://$CP_EDGE_EXTERNAL_HOST:$CP_EDGE_EXTERNAL_PORT/$CP_DAV_URL_PATH/}"
export CP_PREF_UI_PIPELINE_DEPLOYMENT_NAME="${CP_PREF_UI_PIPELINE_DEPLOYMENT_NAME:-CloudPipeline}"
export CP_EDGE_SSL_PROTOCOLS="${CP_EDGE_SSL_PROTOCOLS:-TLSv1.1 TLSv1.2}"
export CP_EDGE_SSL_CIPHERS="EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH"
export CP_EDGE_INVALIDATE_AUTH_PATH=${CP_EDGE_INVALIDATE_AUTH_PATH:-/invalidate}
export CP_EDGE_ROOT_PROXY_PASS_DESTINATION="${CP_EDGE_ROOT_PROXY_PASS_DESTINATION:-\$proxy_type}"

export CP_EDGE_CONNECT_PROXY_AUTHENTICATION_ENABLED="${CP_EDGE_CONNECT_PROXY_AUTHENTICATION_ENABLED:-false}"
if [ "$CP_EDGE_CONNECT_PROXY_AUTHENTICATION_ENABLED" == "true" ]; then
    export CP_EDGE_CONNECT_PROXY_AUTHENTICATION="access_by_lua_file /etc/nginx/validate_proxy_auth.lua;"
fi

if [ -z "$CP_API_SRV_EXTERNAL_HOST" ] || [ -z "$CP_API_SRV_EXTERNAL_PORT" ]; then
    export CP_EDGE_FSBROWSER_CORS="*"
    export CP_EDGE_INVALIDATE_URL_CORS="*"
else
    if [ "$CP_API_SRV_EXTERNAL_PORT" == "443" ]; then
        _api_schema="https"
    elif [ "$CP_API_SRV_EXTERNAL_PORT" == "80" ]; then
        _api_schema="http"
    else
        _api_schema="https"
        _api_port=":$CP_API_SRV_EXTERNAL_PORT"
    fi
    export CP_EDGE_FSBROWSER_CORS="${_api_schema}://${CP_API_SRV_EXTERNAL_HOST}${_api_port}"
    export CP_EDGE_INVALIDATE_URL_CORS="${_api_schema}://${CP_API_SRV_EXTERNAL_HOST}${_api_port}"
fi
# FIXME: !!! WebDAV tips For Windows Drive Mapping:
#        !!! - EDGE shall be added to the "Trusted sites", otherwise Windows WebClient won't send the auth cookie for DAV !!!
#        !!! - File size/timout restrictions which require registry to be modified !!!
#        !!!    - HKLM\SYSTEM\CurrentControlSet\Services\WebClient\Parameters -> FileSizeLimitInBytes (default: 50,000,000) !!!
#        !!!    - HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\MRxDAV\Parameters -> FsCtlRequestTimeoutInSec (default: 30 min) !!!
#        !!! - Make sure that corresponding TLS versions are set in Internet Options otherwise (if the protocl versions do not match) - "Error 67: network name cannot be found" will be thrown by Windows Explorer !!!
#        !!! Reflect this in the documentation !!!
export CP_DAV_INSTRUCTIONS_URL=${CP_DAV_INSTRUCTIONS_URL:-"#"}

AUTH_HTML="$(envsubst '${CP_DAV_EXTERNAL_MAPPING_URL} ${CP_PREF_UI_PIPELINE_DEPLOYMENT_NAME} ${CP_DAV_INSTRUCTIONS_URL}' < /etc/nginx/dav/webdav/auth-sso/index.html)"
echo "$AUTH_HTML" > /etc/nginx/dav/webdav/auth-sso/index.html

NGINX_COMMON_CONF="$(envsubst '${CP_EDGE_SSL_PROTOCOLS} ${CP_EDGE_SSL_CIPHERS}' < /etc/nginx/endpoints-config/server.common.conf)"
echo "$NGINX_COMMON_CONF" > /etc/nginx/endpoints-config/server.common.conf

NGINX_CONF="$(envsubst '${CP_EDGE_REGION} ${CP_EDGE_CONNECT_PROXY_AUTHENTICATION} ${CP_EDGE_ROOT_PROXY_PASS_DESTINATION} ${CP_EDGE_INVALIDATE_AUTH_PATH} ${CP_EDGE_INVALIDATE_URL_CORS} ${CP_EDGE_FSBROWSER_CORS} ${CP_EDGE_WEB_CLIENT_MAX_SIZE} ${CP_DAV_URL_PATH} ${CP_DAV_INTERNAL_HOST} ${CP_DAV_INTERNAL_PORT} ${CP_DAV_AUTH_URL_PATH} ${EDGE_EXTERNAL_SCHEMA} ${CP_EDGE_CLUSTER_RESOLVER} ${CP_EDGE_CLUSTER_RESOLVER_TIMEOUT_SEC} ${CP_PREF_STORAGE_FSBROWSER_PORT} ${CP_DAV_EXTRA_INTERNAL_PORT}' < /etc/nginx/nginx.conf)"
echo "$NGINX_CONF" > /etc/nginx/nginx.conf

# Add the "ingress" configuration to the nginx, which will force all the client traffic to flow via EDGE
# Including API/GUI/Git/Docker
export CP_EDGE_INGRESS_API_CONNECT_TIMEOUT="${CP_EDGE_INGRESS_API_CONNECT_TIMEOUT:-60s}"
export CP_EDGE_INGRESS_API_SEND_TIMEOUT="${CP_EDGE_INGRESS_API_SEND_TIMEOUT:-60s}"
export CP_EDGE_INGRESS_API_READ_TIMEOUT="${CP_EDGE_INGRESS_API_READ_TIMEOUT:-60s}"

services="${CP_SERVICES_ENABLED:-all}"
if [ "$CP_KUBE_SERVICES_TYPE" == "ingress" ]; then 
    export CP_DOLLAR="$"
    # Loop through each file in ingress directory /etc/nginx/ingress/ 
    for ingress_config_tmpl in $(ls ./etc/nginx/ingress/cp-*.conf.tmpl); do
      filename=$(basename "$ingress_config_tmpl")
      service_name="${filename%.conf.tmpl}"
      if [[ "$services" == "all" ]] || [[ ",${services}," =~ ",${service_name}," ]]; then
        config_content="$(envsubst < $ingress_config_tmpl)"
        echo "$config_content" > "${ingress_config_tmpl%.tmpl}"
      fi
    done
    unset CP_DOLLAR
fi

# Copy the "external apps" configurations to a docker filesystem
# Previously we were working with the "external apps" directly, i.e. /opt/edge/external-apps mounted to /etc/nginx/external-apps
# And /etc/nginx/external-apps was modified from an edge container, e.g. adding location blocks to the custom domains
# This was causing an issue, if:
#   * Any "external app" had a location block defined
#   * EDGE fails for some reason (e.g. wetty OOM) and restarts
#   * EDGE has a location block in an "external app", but it does not exist in the container filesystem
#   * Nginx cannot start at all as the configuration is invalid
# So it's better to have everything local to a docker filesystem, this way the configuration would be consistent
if [ -d /etc/nginx/ext/external-apps ]; then
    echo "Copying /etc/nginx/ext/external-apps -> /etc/nginx/external-apps..."
    cp -r /etc/nginx/ext/external-apps /etc/nginx/external-apps
fi

# Copy the "pki" service keys to a docker filesystem
# Previously all the pki keys were available directly from a shared file system
# This was causing an issue, if:
#   * EDGE and shared file system are deployed to different regions
# So it's better to have everything local to a docker filesystem, this way nginx performance will be optimal
pki_mount_dir="/opt"
pki_local_dir="/etc"
for service_mount_dir in "$pki_mount_dir"/*; do
    service_name="$(basename "$service_mount_dir")"
    service_local_dir="$pki_local_dir/$service_name"
    if [ -d "$service_mount_dir/pki" ]; then
      echo "Copying $service_mount_dir/pki -> $service_local_dir/pki..."
      mkdir -p "$service_local_dir"
      cp -rL "$service_mount_dir/pki" "$service_local_dir/pki"
    fi
done

# Start wetty.js for SSH proxy
nohup node /etc/ssh-proxy/wetty/app.js -p 32000 >> /var/log/wetty.log 2>&1 &
WETTY_PID="$!"

# Persist environment for a cron job
env > /etc/sync-routes/env.sh
env > /etc/maintenance/env.sh

# Start cron
nohup bash /etc/sync-routes/crontab.sh &> /dev/null &
CRON_PID="$!"

# Start maintenance cron
nohup bash /etc/maintenance/crontab.sh &> /dev/null &
MAINTENANCE_CRON_PID="$!"

# Run Filebeat instances
nohup filebeat \
      -path.data /var/lib/filebeat/security-log \
      -path.logs /var/log/filebeat/security-log \
      -c filebeat-security-log.yml &
nohup filebeat \
      -path.data /var/lib/filebeat/audit-dav \
      -path.logs /var/log/filebeat/audit-dav \
      -c filebeat-audit-dav.yml &

# Prepare the static assets
for static_file in /etc/nginx/static/*; do
    static_content="$(envsubst '${API_EXTERNAL}' < $static_file)"
    echo "$static_content" > "$static_file"
done

# Start nginx
echo "Starting nginx..."
nginx -p /etc/nginx/ -c /etc/nginx/nginx.conf

sleep 5

# Workaround the container hanging when being terminated
function sig_handler {
    echo "Got SIGTERM, stopping wetty (PID $WETTY_PID), stopping cron (PID $CRON_PID), stopping maintenance cron (PID $MAINTENANCE_CRON_PID) quitting nginx and exiting"
    if [ $WETTY_PID -ne 0 ]; then
        kill -SIGTERM "$WETTY_PID"
        wait "$WETTY_PID"
    fi
    if [ $CRON_PID -ne 0 ]; then
        kill -SIGTERM "$CRON_PID"
        wait "$CRON_PID"
    fi
    if [ $MAINTENANCE_CRON_PID -ne 0 ]; then
        kill -SIGTERM "$MAINTENANCE_CRON_PID"
        wait "$MAINTENANCE_CRON_PID"
    fi
    nginx -s quit
    exit 143
}
trap 'kill $! ; sig_handler' SIGTERM
# Print wetty and cron logs to the stdout
tail -f /var/log/wetty.log -f /var/log/sync-routes.log -f /var/log/maintenance.log &
wait "$!"
