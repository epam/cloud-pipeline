#!/bin/bash
# NOTE 1: The difference between this script and pipe_notify is that this one is compatible with standard
# /bin/mail program and can be replacement for it.
# It can be very convenient and for some cases even necessary (f.i. integration with Slurm ang SGE)
#
# NOTE 2: Currently supports only bare minimal of options from original /bin/mail program (-s and receiver)
#
# See https://www.commandlinux.com/man-page/man1/mail.1.html for the information about all args

_PIPE_MAIL_LOG_FILE="/var/log/pipe_mail.log"

function construct_email_subject {
    local _grid_engine_msg=$1
    echo "Run #$RUN_ID. Job info: $_grid_engine_msg"
}

function get_cp_user_id {
    local _provider_user_id=$1
    local _effective_user_id="$_provider_user_id"
    echo "Sending to $_provider_user_id ..." >> ${_PIPE_MAIL_LOG_FILE}

    if [ ! -f "$DEFAULT_HOSTFILE" ]; then
            _NODE_NAMES="$(hostname)"
    else
        IFS=$'\n' read -d '' -r -a _NODE_NAMES < "$DEFAULT_HOSTFILE"
    fi

    for _NODE in ${_NODE_NAMES[*]} ; do
        if [[ "$_provider_user_id" == *"$_NODE"* ]]; then
            _to_user_and_hostname="$_provider_user_id"
            IFS='@' read -r -a user_info <<< "$_provider_user_id"
            export _effective_user_id="${user_info[0]}"
            echo "Got username $_effective_user_id from username@host record $_to_user_and_hostname" >> ${_PIPE_MAIL_LOG_FILE}
            break
        fi
    done

    if [[ "$_effective_user_id" == "root" ]]; then
        echo "Job owner is $_effective_user_id, changing receiver to $REMOTE_OWNER" >> ${_PIPE_MAIL_LOG_FILE}
        _effective_user_id="$REMOTE_OWNER"
    fi

    echo "$_effective_user_id"
}

echo "Start sending emails to pipeline users" >> ${_PIPE_MAIL_LOG_FILE}
echo "Getting envs from /etc/cp_env.sh" >> ${_PIPE_MAIL_LOG_FILE}
source /etc/cp_env.sh

echo "Parsing args: $@" >> ${_PIPE_MAIL_LOG_FILE}
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -a|-b|-c|-u) # skipping unused key-value args of /bin/mail program
    shift # past argument
    shift # past value
    ;;
    -d|-E|-f|-I|-i|-N|-n|-v) # skipping unused flag args of /bin/mail program
    shift # past argument
    ;;
    -s) # Subject of the email to be sent
    export _NOTIFICATION_SUBJECT=$(construct_email_subject "$2")
    shift # past argument
    shift # past value
    ;;
    *)    # save positional args
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

echo "Sending emails to: $@" >> ${_PIPE_MAIL_LOG_FILE}
while [[ $# -gt 0 ]]
do
    _to_user=$(get_cp_user_id "$1")
    pipe_notify "$_NOTIFICATION_SUBJECT" "$_NOTIFICATION_SUBJECT" "$_to_user" &>> ${_PIPE_MAIL_LOG_FILE}
    shift # skip email that was already processed
done

echo "Done sending emails to pipeline users" >> ${_PIPE_MAIL_LOG_FILE}
echo >> ${_PIPE_MAIL_LOG_FILE}
