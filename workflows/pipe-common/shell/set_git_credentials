#!/usr/bin/env bash

# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###############################################################################
# Set git credentials.
###############################################################################

message="Must be set and not be empty"

api_host_url=${API:?${message}}
api_token=${API_TOKEN:?${message}}
api_pipeline_credentials_url="${api_host_url}/pipeline/git/credentials"

git_credentials=$(curl --fail --silent --insecure \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $api_token" \
  "$api_pipeline_credentials_url")

if [ $? -ne 0 ]; then
  echo "[ERROR] Unable to get the GIT credentials from $api_pipeline_credentials_url. Server responded: $git_credentials"
  exit 1
fi

git_url=$(jq -r '.payload.url // empty' <<< "$git_credentials")
git_username=$(jq -r '.payload.userName // empty' <<< "$git_credentials")
git_email=$(jq -r '.payload.email // empty' <<< "$git_credentials")

if [ -z "$git_url" ] || \
   [ -z "$git_username" ]; then
  echo "[ERROR] Unable to get GIT url/username from the server response"
  exit 1
fi

if [ -z "$git_email" ]; then
  git_email="noone@nowhere.com"
  echo "[WARN] Unable to get GIT email from the server response, but the username is set ${git_username}. \
        Current user probably has no GIT repositories and therefore was not synced. Default email will be used ${git_email}"
fi

# Setup root's credentials file
git_credentials_file_root="/root/.git-credentials"
git_config_file_root="/root/.gitconfig"
echo "$git_url" > "$git_credentials_file_root"
git config --global credential.helper "store --file $git_credentials_file_root"
git config --global http.sslVerify "false"
git config --global user.name "$git_username"
git config --global user.email "$git_email"
chmod 600 "$git_credentials_file_root" "$git_config_file_root"

# Copy the credentials file to the $OWNER space (if it exists)
# We cannot reuse the same file (root's). According to https://git-scm.com/docs/git-credential-store#_options: 
# "...The file will have its filesystem permissions set to prevent other users on the system from reading it..."
if [ "$OWNER" ] && [ "$OWNER_HOME" ]; then
  git_credentials_file_owner="$OWNER_HOME/.git-credentials"
  git_config_file_owner="$OWNER_HOME/.gitconfig"
  mkdir -p "$OWNER_HOME"
  \cp "$git_credentials_file_root" "$git_credentials_file_owner"
  \cp "$git_config_file_root" "$git_config_file_owner"
  # Replace the credentials path from root to owner home directory
  sed -i "s|$git_credentials_file_root|$git_credentials_file_owner|g" "$git_config_file_owner"
  chown "${OWNER}:${OWNER}" "$git_credentials_file_owner" "$git_config_file_owner"
  chmod 600 "$git_credentials_file_owner" "$git_config_file_owner"
fi
