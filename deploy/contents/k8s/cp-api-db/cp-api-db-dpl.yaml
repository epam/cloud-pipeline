apiVersion: apps/v1
kind: Deployment
metadata:
  name: cp-api-db
  namespace: default
spec:
  selector:
    matchLabels:
      cloud-pipeline/cp-api-db: "true"
  replicas: 1
  template:
    metadata:
      namespace: default
      labels:
        cloud-pipeline/cp-api-db: "true"
        cloud-pipeline/core-component: "Deployment"
    spec:
      nodeSelector:
        cloud-pipeline/cp-api-db: "true"
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
        - name: cp-api-db
          image: postgres:${PSG_VERSION}
          imagePullPolicy: "IfNotPresent"
          args:
            - --shared_buffers=${PSG_SHARED_BUFFERS}
            - --max_connections=${PSG_MAX_CONNECTIONS}
          ports:
            - containerPort: ${PSG_PORT}
          env:
            - name: POSTGRES_DB
              value: "postgres"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "postgres"
            - name: PGDATA
              value: /var/lib/postgresql/data
            - name: DB_EXTENSION
              value: pg_trgm
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: pgdata
            - mountPath: /dev/shm
              name: dshm
          readinessProbe:
            tcpSocket:
              port: ${PSG_PORT}
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: ${PSG_PORT}
            initialDelaySeconds: 120
            periodSeconds: 15
            failureThreshold: 4
      volumes:
        - name: pgdata
          hostPath:
            path: /opt/postgresql/data
        - name: dshm
          emptyDir:
            medium: Memory
      imagePullSecrets:
        - name: cp-distr-docker-registry-secret
