<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2017-2021 EPAM Systems, Inc. (https://www.epam.com/)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean class="com.epam.pipeline.dao.tool.ToolDao" id="toolDao" autowire="byName">
        <property name="toolSequence" value="pipeline.s_tool"/>
        <property name="toolIconSequence" value="pipeline.s_tool_icon"/>
        <property name="createToolQuery">
            <value>
                <![CDATA[
                    INSERT INTO pipeline.tool (
                        id,
                        image,
                        description,
                        short_description,
                        cpu,
                        ram,
                        registry_id,
                        tool_group_id,
                        default_command,
                        labels,
                        endpoints,
                        owner,
                        disk,
                        instance_type,
                        link,
                        allow_sensitive)
                    VALUES (
                        :ID,
                        :IMAGE,
                        :DESCRIPTION,
                        :SHORT_DESCRIPTION,
                        :CPU,
                        :RAM,
                        :REGISTRY_ID,
                        :TOOL_GROUP_ID,
                        :DEFAULT_COMMAND,
                        :LABELS,
                        :ENDPOINTS,
                        :OWNER,
                        :DISK,
                        :INSTANCE_TYPE,
                        :LINK,
                        :ALLOW_SENSITIVE)
                ]]>
            </value>
        </property>
        <property name="updateToolQuery">
            <value>
                <![CDATA[
                    UPDATE pipeline.tool SET
                        cpu = :CPU,
                        ram = :RAM,
                        description = :DESCRIPTION,
                        short_description = :SHORT_DESCRIPTION,
                        default_command = :DEFAULT_COMMAND,
                        labels = :LABELS,
                        endpoints = :ENDPOINTS,
                        disk = :DISK,
                        instance_type = :INSTANCE_TYPE,
                        allow_sensitive = :ALLOW_SENSITIVE
                    WHERE
                        image = :IMAGE AND registry_id = :REGISTRY_ID
                ]]>
            </value>
        </property>
        <property name="updateOwnerQuery">
            <value>
                <![CDATA[
                    UPDATE pipeline.tool SET
                        owner = :OWNER
                    WHERE
                        id = :ID
                ]]>
            </value>
        </property>
        <property name="loadAllToolsQuery">
            <value>
                <![CDATA[
                    SELECT
                        t.id,
                        t.image,
                        COALESCE(tl.description, t.description) AS description,
                        COALESCE(tl.short_description, t.short_description) AS short_description,
                        COALESCE(tl.cpu, t.cpu) AS cpu,
                        COALESCE(tl.ram, t.ram) AS ram,
                        t.registry_id,
                        t.tool_group_id,
                        COALESCE(tl.default_command, t.default_command) AS default_command,
                        COALESCE(tl.labels, t.labels) AS labels,
                        COALESCE(tl.endpoints, t.endpoints) AS endpoints,
                        t.owner,
                        COALESCE(tl.disk, t.disk) AS disk,
                        COALESCE(tl.instance_type, t.instance_type) AS instance_type,
                        COALESCE(tl.icon_id, t.icon_id) AS icon_id,
                        t.link,
                        COALESCE(tl.allow_sensitive, t.allow_sensitive) as allow_sensitive,
                        dr.path as registry,
                        dr.secret_name
                    FROM
                        pipeline.tool t
                    INNER JOIN pipeline.docker_registry dr ON (t.registry_id = dr.id)
                    LEFT JOIN pipeline.tool tl ON (t.link = tl.id)
                    WHERE
                        (:REGISTRY_ID IS NULL OR t.registry_id = :REGISTRY_ID)
                    AND
                        (array_length(:LABELS_TO_SEARCH, 1) IS NULL
                        OR array_length(:LABELS_TO_SEARCH, 1) = 0
                        OR :LABELS_TO_SEARCH && COALESCE(tl.labels, t.labels))
                ]]>
            </value>
        </property>
        <property name="loadToolQuery">
            <value>
                <![CDATA[
                    SELECT
                        t.id,
                        t.image,
                        COALESCE(tl.description, t.description) AS description,
                        COALESCE(tl.short_description, t.short_description) AS short_description,
                        COALESCE(tl.cpu, t.cpu) AS cpu,
                        COALESCE(tl.ram, t.ram) AS ram,
                        t.registry_id,
                        t.tool_group_id,
                        COALESCE(tl.default_command, t.default_command) AS default_command,
                        COALESCE(tl.labels, t.labels) AS labels,
                        COALESCE(tl.endpoints, t.endpoints) AS endpoints,
                        t.owner,
                        COALESCE(tl.disk, t.disk) AS disk,
                        COALESCE(tl.instance_type, t.instance_type) AS instance_type,
                        COALESCE(tl.icon_id, t.icon_id) AS icon_id,
                        t.link,
                        COALESCE(tl.allow_sensitive, t.allow_sensitive) as allow_sensitive,
                        dr.path as registry,
                        dr.secret_name
                    FROM
                        pipeline.tool t
                    INNER JOIN pipeline.docker_registry dr ON (t.registry_id = dr.id)
                    LEFT JOIN pipeline.tool tl ON (t.link = tl.id)
                    WHERE t.id = ?
                ]]>
            </value>
        </property>
        <property name="loadAllByRegistryAndImageInQuery">
            <value>
                <![CDATA[
                    SELECT
                        t.id,
                        t.image,
                        COALESCE(tl.description, t.description) AS description,
                        COALESCE(tl.short_description, t.short_description) AS short_description,
                        COALESCE(tl.cpu, t.cpu) AS cpu,
                        COALESCE(tl.ram, t.ram) AS ram,
                        t.registry_id,
                        t.tool_group_id,
                        COALESCE(tl.default_command, t.default_command) AS default_command,
                        COALESCE(tl.labels, t.labels) AS labels,
                        COALESCE(tl.endpoints, t.endpoints) AS endpoints,
                        t.owner,
                        COALESCE(tl.disk, t.disk) AS disk,
                        COALESCE(tl.instance_type, t.instance_type) AS instance_type,
                        COALESCE(tl.icon_id, t.icon_id) AS icon_id,
                        t.link,
                        COALESCE(tl.allow_sensitive, t.allow_sensitive) as allow_sensitive,
                        dr.path as registry,
                        dr.secret_name
                    FROM
                        pipeline.tool t
                    INNER JOIN pipeline.docker_registry dr ON (t.registry_id = dr.id)
                    LEFT JOIN pipeline.tool tl ON (t.link = tl.id)
                    WHERE
                        t.image IN (:list)
                        AND
                        (:REGISTRY_ID IS NULL OR t.registry_id = :REGISTRY_ID)
                ]]>
            </value>
        </property>
        <property name="deleteToolQuery">
            <value>
                <![CDATA[
                    DELETE FROM pipeline.tool WHERE id = :ID
                ]]>
            </value>
        </property>
        <property name="loadToolByRegistryAndImageQuery">
            <value>
                <![CDATA[
                    SELECT
                        t.id,
                        t.image,
                        COALESCE(tl.description, t.description) AS description,
                        COALESCE(tl.short_description, t.short_description) AS short_description,
                        COALESCE(tl.cpu, t.cpu) AS cpu,
                        COALESCE(tl.ram, t.ram) AS ram,
                        t.registry_id,
                        t.tool_group_id,
                        COALESCE(tl.default_command, t.default_command) AS default_command,
                        COALESCE(tl.labels, t.labels) AS labels,
                        COALESCE(tl.endpoints, t.endpoints) AS endpoints,
                        t.owner,
                        COALESCE(tl.disk, t.disk) AS disk,
                        COALESCE(tl.instance_type, t.instance_type) AS instance_type,
                        COALESCE(tl.icon_id, t.icon_id) AS icon_id,
                        t.link,
                        COALESCE(tl.allow_sensitive, t.allow_sensitive) as allow_sensitive,
                        dr.path as registry,
                        dr.secret_name
                    FROM
                        pipeline.tool t
                    INNER JOIN pipeline.docker_registry dr ON (t.registry_id = dr.id)
                    LEFT JOIN pipeline.tool tl ON (t.link = tl.id)
                    WHERE
                        t.image = :IMAGE
                        AND
                        (:REGISTRY_ID IS NULL OR t.registry_id = :REGISTRY_ID)
                ]]>
            </value>
        </property>
        <property name="loadToolsByGroupQuery">
            <value>
                <![CDATA[
                    SELECT
                        t.id,
                        t.image,
                        COALESCE(tl.description, t.description) AS description,
                        COALESCE(tl.short_description, t.short_description) AS short_description,
                        COALESCE(tl.cpu, t.cpu) AS cpu,
                        COALESCE(tl.ram, t.ram) AS ram,
                        t.registry_id,
                        t.tool_group_id,
                        COALESCE(tl.default_command, t.default_command) AS default_command,
                        COALESCE(tl.labels, t.labels) AS labels,
                        COALESCE(tl.endpoints, t.endpoints) AS endpoints,
                        t.owner,
                        COALESCE(tl.disk, t.disk) AS disk,
                        COALESCE(tl.instance_type, t.instance_type) AS instance_type,
                        COALESCE(tl.icon_id, t.icon_id) AS icon_id,
                        t.link,
                        COALESCE(tl.allow_sensitive, t.allow_sensitive) as allow_sensitive,
                        dr.path as registry,
                        dr.secret_name
                    FROM
                        pipeline.tool t
                    INNER JOIN pipeline.docker_registry dr ON (t.registry_id = dr.id)
                    LEFT JOIN pipeline.tool tl ON (t.link = tl.id)
                    WHERE
                        t.tool_group_id = ?
                ]]>
            </value>
        </property>
        <property name="loadToolsWithIssueCountByGroupQuery">
            <value>
                <![CDATA[
                    SELECT
                        t.id,
                        t.image,
                        COALESCE(tl.description, t.description) AS description,
                        COALESCE(tl.short_description, t.short_description) AS short_description,
                        COALESCE(tl.cpu, t.cpu) AS cpu,
                        COALESCE(tl.ram, t.ram) AS ram,
                        t.registry_id,
                        t.tool_group_id,
                        COALESCE(tl.default_command, t.default_command) AS default_command,
                        COALESCE(tl.labels, t.labels) AS labels,
                        COALESCE(tl.endpoints, t.endpoints) AS endpoints,
                        t.owner,
                        COALESCE(tl.disk, t.disk) AS disk,
                        COALESCE(tl.instance_type, t.instance_type) AS instance_type,
                        COALESCE(tl.icon_id, t.icon_id) AS icon_id,
                        t.link,
                        COALESCE(tl.allow_sensitive, t.allow_sensitive) as allow_sensitive,
                        dr.path as registry,
                        dr.secret_name,
						count(i.issue_id) AS issues_count
                    FROM
                        pipeline.tool t
                    INNER JOIN pipeline.docker_registry dr ON (t.registry_id = dr.id)
                    LEFT JOIN pipeline.tool tl ON (t.link = tl.id)
					LEFT JOIN issue AS i ON i.entity_id = COALESCE(tl.id, t.id) AND i.entity_class = 'TOOL'
                    WHERE
                        t.tool_group_id = ?
					GROUP BY t.id, tl.id, dr.path, dr.secret_name
                ]]>
            </value>
        </property>
        <property name="loadToolsFromOtherRegistriesByImageQuery">
            <value>
                <![CDATA[
                    SELECT
                        t.id,
                        t.image,
                        COALESCE(tl.description, t.description) AS description,
                        COALESCE(tl.short_description, t.short_description) AS short_description,
                        COALESCE(tl.cpu, t.cpu) AS cpu,
                        COALESCE(tl.ram, t.ram) AS ram,
                        t.registry_id,
                        t.tool_group_id,
                        COALESCE(tl.default_command, t.default_command) AS default_command,
                        COALESCE(tl.labels, t.labels) AS labels,
                        COALESCE(tl.endpoints, t.endpoints) AS endpoints,
                        t.owner,
                        COALESCE(tl.disk, t.disk) AS disk,
                        COALESCE(tl.instance_type, t.instance_type) AS instance_type,
                        COALESCE(tl.icon_id, t.icon_id) AS icon_id,
                        t.link,
                        COALESCE(tl.allow_sensitive, t.allow_sensitive) as allow_sensitive,
                        dr.path as registry,
                        dr.secret_name
                    FROM
                        pipeline.tool t
                    INNER JOIN pipeline.docker_registry dr ON (t.registry_id = dr.id)
                    LEFT JOIN pipeline.tool tl ON (t.link = tl.id)
                    WHERE
                        t.image = :IMAGE AND dr.path != :REGISTRY
                ]]>
            </value>
        </property>
        <property name="loadToolByGroupAndImageQuery">
            <value>
                <![CDATA[
                    SELECT
                        t.id,
                        t.image,
                        COALESCE(tl.description, t.description) AS description,
                        COALESCE(tl.short_description, t.short_description) AS short_description,
                        COALESCE(tl.cpu, t.cpu) AS cpu,
                        COALESCE(tl.ram, t.ram) AS ram,
                        t.registry_id,
                        t.tool_group_id,
                        COALESCE(tl.default_command, t.default_command) AS default_command,
                        COALESCE(tl.labels, t.labels) AS labels,
                        COALESCE(tl.endpoints, t.endpoints) AS endpoints,
                        t.owner,
                        COALESCE(tl.disk, t.disk) AS disk,
                        COALESCE(tl.instance_type, t.instance_type) AS instance_type,
                        COALESCE(tl.icon_id, t.icon_id) AS icon_id,
                        t.link,
                        COALESCE(tl.allow_sensitive, t.allow_sensitive) as allow_sensitive,
                        dr.path as registry,
                        dr.secret_name
                    FROM
                        pipeline.tool t
                    INNER JOIN pipeline.docker_registry dr ON (t.registry_id = dr.id)
                    LEFT JOIN pipeline.tool tl ON (t.link = tl.id)
                    WHERE
                        t.tool_group_id = :TOOL_GROUP_ID
                        AND t.image = :IMAGE
                ]]>
            </value>
        </property>
        <property name="updateToolIconQuery">
            <value>
                <![CDATA[
                    INSERT INTO pipeline.tool_icon (
                        icon_id,
                        tool_id,
                        file_name,
                        icon
                    ) VALUES (
                        ?,
                        ?,
                        ?,
                        ?
                    )
                ]]>
            </value>
        </property>
        <property name="updateToolIconIdQuery">
            <value>
                <![CDATA[
                    UPDATE pipeline.tool SET icon_id = ? WHERE id = ?
                ]]>
            </value>
        </property>
        <property name="loadToolIconQuery">
            <value>
                <![CDATA[
                    SELECT i.file_name, i.icon
                    FROM pipeline.tool_icon i
                    INNER JOIN pipeline.tool tl ON (tl.id = i.tool_id)
                    LEFT JOIN pipeline.tool t ON (t.link = tl.id)
                    WHERE ? IN (t.id, tl.id)
                ]]>
            </value>
        </property>
        <property name="deleteToolIconQuery">
            <value>
                <![CDATA[
                    DELETE FROM pipeline.tool_icon WHERE tool_id = ?
                ]]>
            </value>
        </property>
    </bean>
</beans>
