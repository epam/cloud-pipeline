#!/bin/bash

# Copyright 2017-2021 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

function clone_repository {
      local _REPOSITORY_URL=$1
      local _REPOSITORY_LOCAL_PATH=$2
      local _RETRIES_COUNT=$3
      local _RETRIES_TIMEOUT=$4
      local _CLONE_RESULT=0

      for _RETRY_ITERATION in $(seq 1 "$_RETRIES_COUNT");
      do
            git  -c http.sslVerify=false  clone "$_REPOSITORY_URL" "$_REPOSITORY_LOCAL_PATH" -q
            _CLONE_RESULT=$?

            if [ $_CLONE_RESULT -ne 0 ];
            then
                  echo "[WARNING] Try #${_RETRY_ITERATION}. Failed to clone ${_REPOSITORY_URL} to ${_REPOSITORY_LOCAL_PATH}"
                  sleep "$_RETRIES_TIMEOUT"
            else
                  break
            fi
      done

      return "$_CLONE_RESULT"
}

_REPO_DIR=$1
_GIT_REPO=$2
_REPO_REVISION=$3
_RESUMED_RUN=$4
_BRANCH=$5

# check whether we shall get code from repository before executing a command or not
if [ -z "$_GIT_REPO" ] ;
then
      echo "GIT_REPO is not defined, skipping clone"
elif  [ "$_RESUMED_RUN" == true ] ;
then
      echo "Skipping pipeline repository clone for a resumed run"
else
      # clone current pipeline repo
      clone_repository $_GIT_REPO $_REPO_DIR 3 10
      _CLONE_RESULT=$?
      if [ "$_CLONE_RESULT" -ne 0 ];
      then
            echo "[ERROR] Pipeline repository clone failed. Exiting"
            exit "$_CLONE_RESULT"
      fi
      cd $_REPO_DIR

      if [ -z "$_BRANCH" ]
      then
            git -c http.sslVerify=false checkout $_REPO_REVISION -q
      else
            git -c http.sslVerify=false checkout -b $_BRANCH $_REPO_REVISION -q
      fi
      cd -
fi
