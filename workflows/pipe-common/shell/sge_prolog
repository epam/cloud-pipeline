#!/bin/bash

# Copyright (c) 2015 Kota Yamaguchi
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

exec &> >(tee -a "${COMMON_DIR:-/common}/sge/logs/${HOSTNAME}_prolog_${JOB_ID}")

echo "Executing Cloud Pipeline prolog script as $(whoami) on ${HOSTNAME} for job ${JOB_ID}..."

JOB_ENV_FILE="$SGE_JOB_SPOOL_DIR/environment"

if [ ! -f "$JOB_ENV_FILE" ]; then
    echo "ERROR: Job environment file is not accessible at $JOB_ENV_FILE. Exiting..."
    exit 100
fi

CP_CAP_GE_CONSUMABLE_RESOURCE_NAME_GPU="${CP_CAP_GE_CONSUMABLE_RESOURCE_NAME_GPU:-gpus}"
CP_CAP_GE_CONSUMABLE_RESOURCE_LOCKS_GPU="${CP_CAP_GE_CONSUMABLE_RESOURCE_LOCKS_GPU:-/tmp/sge-gpus-locks}"

JOB_GPUS_NUMBER="$(qstat -j "$JOB_ID" | grep -oP "$CP_CAP_GE_CONSUMABLE_RESOURCE_NAME_GPU=\K\d+")"
JOB_GPUS_NUMBER="${JOB_GPUS_NUMBER:-0}"

if [ "$JOB_GPUS_NUMBER" -le 0 ]; then
    exit 0
fi

JOB_GPU_DEVICES=""
JOB_GPU_DEVICES_NUMBER=0
for GPU_DEVICE in "$CP_CAP_GE_CONSUMABLE_RESOURCE_LOCKS_GPU/total/"*; do
    GPU_DEVICE="$(basename "$GPU_DEVICE")"
    echo -n "Acquiring GPU device $GPU_DEVICE... "
    if ! mkdir "$CP_CAP_GE_CONSUMABLE_RESOURCE_LOCKS_GPU/inuse/$GPU_DEVICE" 2>/dev/null; then
        echo "NOT OK"
        continue
    fi
    mkdir "$CP_CAP_GE_CONSUMABLE_RESOURCE_LOCKS_GPU/inuse/$GPU_DEVICE/$JOB_ID"
    JOB_GPU_DEVICES="$JOB_GPU_DEVICES $GPU_DEVICE"
    JOB_GPU_DEVICES_NUMBER="$(( JOB_GPU_DEVICES_NUMBER + 1 ))"
    echo "OK"
    if [ "$JOB_GPU_DEVICES_NUMBER" -ge "$JOB_GPUS_NUMBER" ]; then
        break
    fi
done

if [ "$JOB_GPU_DEVICES_NUMBER" -lt "$JOB_GPUS_NUMBER" ]; then
    echo "ERROR: Insufficient amount of available GPU devices at $CP_CAP_GE_CONSUMABLE_RESOURCE_LOCKS_GPU ($JOB_GPU_DEVICES_NUMBER/$JOB_GPUS_NUMBER)"
    for GPU_DEVICE in $JOB_GPU_DEVICES; do
        echo -n "Releasing GPU device $GPU_DEVICE... "
        if ! rmdir "$CP_CAP_GE_CONSUMABLE_RESOURCE_LOCKS_GPU/inuse/$GPU_DEVICE/$JOB_ID" \
                   "$CP_CAP_GE_CONSUMABLE_RESOURCE_LOCKS_GPU/inuse/$GPU_DEVICE" 2>/dev/null; then
            echo "NOT OK"
            continue
        fi
        echo "OK"
    done
    echo "Exiting..."
    exit 100
fi

CUDA_VISIBLE_DEVICES="$(echo "$JOB_GPU_DEVICES" | sed -e 's/^ //' | sed -e 's/ /,/g')"

if ! echo "CUDA_VISIBLE_DEVICES=$CUDA_VISIBLE_DEVICES" >> "$JOB_ENV_FILE"; then
    echo "ERROR: Job environment file is not writable at $JOB_ENV_FILE. Exiting..."
    exit 100
fi

exit 0
