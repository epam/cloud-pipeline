#!/usr/bin/env bash
# Copyright 2020 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DCV_INSTALL_TASK="NiceDCVInitialization"
export CP_DCV_LOCAL_PORT="8443"
export _RETRIES_TIMEOUT="${CP_DCV_RETRY_TIMEOUT:-30}"
export _RETRIES_COUNT="${CP_DCV_RETRIES_COUNT:-60}"

function install_prerequisites {
  if [[ "$IS_RPM_BASED" = 0 ]]; then
    yum update -y && \
    yum -y install glx-utils mesa-dri-drivers xorg-x11-server-Xorg \
                       xorg-x11-utils xorg-x11-xauth xorg-x11-xinit xvattr \
                       xorg*fonts* xterm libXvMC mesa-libxatracker freeglut \
                       gnome-desktop3 gnome-terminal gnome-system-log \
                       gnome-system-monitor nautilus evince gnome-color-manager \
                       gnome-font-viewer gnome-shell gnome-calculator gedit gdm \
                       metacity gnome-session gnome-classic-session \
                       gnome-session-xsession gnu-free-fonts-common \
                       gnu-free-mono-fonts gnu-free-sans-fonts \
                       gnu-free-serif-fonts desktop-backgrounds-gnome && \
    yum -y groupinstall "Xfce"
  fi
  $CP_PYTHON2_PATH -m pip install flask==1.1.1 Flask-HTTPAuth==3.3.0
}

function install_dcv {
  if [[ "$IS_RPM_BASED" = 0 ]]; then
    rpm --import https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY
    wget https://d1uj6qtbmh3dt5.cloudfront.net/2021.2/Servers/nice-dcv-2021.2-11190-el7-x86_64.tgz
    tar -xvzf nice-dcv-2021.2-11190-el7-x86_64.tgz && cd nice-dcv-2021.2-11190-el7-x86_64
    yum install -y nice-dcv-server-2021.2.11190-1.el7.x86_64.rpm \
                   nice-dcv-web-viewer-2021.2.11190-1.el7.x86_64.rpm \
                   nice-xdcv-2021.2.411-1.el7.x86_64.rpm
    cd .. && rm -rf nice-dcv-2021.2-11190-el7-x86_64*
    systemctl start dbus
  fi

  usermod -aG video dcv
  #change auth to none
  sed -i 's|#authentication="none"|authentication="none"|g' /etc/dcv/dcv.conf
  pipe_log_info "DCV successfully installed and configured" "$DCV_INSTALL_TASK"
}

function run_dcv {
  if [[ "$IS_RPM_BASED" = 0 ]]; then
    pipe_log_info "Run DCV server and waiting for boot up" "$DCV_INSTALL_TASK"
    systemctl start dcvserver
  else
    pipe_log_warn "DCV desktop port is not set (CP_DCV_DESKTOP_PORT). Desktop session will not be available." "$DCV_INSTALL_TASK"
  fi

  # Wait until dcv server will be ready
  for _RETRY_ITERATION in $(seq 1 "$_RETRIES_COUNT"); do
      curl -k -s "https://localhost:8443/" &> /dev/null
      _CHECK_RESULT=$?

      if [ $_CHECK_RESULT -ne 0 ]; then
        pipe_log_warn "[WARNING] DCV server still not running. Try #${_RETRY_ITERATION}." "$DCV_INSTALL_TASK"
        sleep "$_RETRIES_TIMEOUT"
      else
        pipe_log_info "[INFO] DCV server is running. Proceeding." "$DCV_INSTALL_TASK"
        break
      fi
  done

  if [ $_CHECK_RESULT -ne 0 ]; then
      pipe_log_fail "[ERROR] DCV server cannot be running." "$DCV_INSTALL_TASK"
      exit 1
  fi

  dcv create-session --owner $OWNER --user $OWNER session

  # Serve additional server to provide dcv desktop session file
  if [ ! -z CP_DCV_DESKTOP_PORT ]; then
      pipe_log_info "Run DCV desktop launcher" "$DCV_INSTALL_TASK"
      nohup $CP_PYTHON2_PATH $COMMON_REPO_DIR/scripts/nice_dcv_desktop_launcher.py \
                                                          --desktop-port $CP_DCV_DESKTOP_PORT \
                                                          --serving-port $CP_DCV_LOCAL_PORT \
                                                          --proxy-host $CP_DCV_PROXY_HOST \
                                                          --proxy-port $CP_DCV_PROXY_PORT &> /var/log/nice-dcv-desktop.log

  fi
}

function check_dcv_installation {
  if [[ "$IS_RPM_BASED" = 0 ]]; then
    rpm -qa | grep dcv
  fi
}

######################################################
# Check if this is a RPM Linux distribution
######################################################
/usr/bin/rpm -q -f /usr/bin/rpm >/dev/null 2>&1
export IS_RPM_BASED=$?

######################################################
# Check cloud platform
######################################################
if [[ "${CLOUD_PROVIDER}" -ne "AWS" ]]; then
    pipe_log_fail "Cloud ${CLOUD_PROVIDER} is not supported, exiting." "$DCV_INSTALL_TASK"
    exit 1
fi

 if [[ "$IS_RPM_BASED" = 0 ]]; then
    pipe_log_info "RPM based os distribution, proceeding with installation" "$DCV_INSTALL_TASK"
  else
    pipe_log_fail "OS is not supported, exiting." "$DCV_INSTALL_TASK"
    exit 1
  fi

# Check if required proxy settings are correct
export CP_DCV_PROXY_HOST="${CP_DCV_PROXY_HOST:-$(echo $CP_CAP_DCV_PROXY_HOST)}"
if [ -z $CP_DCV_PROXY_HOST ]; then
    pipe_log_fail "DCV proxy host is not set (CP_DCV_PROXY_HOST). Exiting..." "$DCV_INSTALL_TASK"
    exit 1
fi

export CP_DCV_PROXY_PORT="${CP_DCV_PROXY_PORT:-$(echo $CP_CAP_DCV_PROXY_PORT)}"
if [ -z $CP_DCV_PROXY_PORT ]; then
    pipe_log_fail "DCV proxy port is not set (CP_DCV_PROXY_PORT). Exiting..." "$DCV_INSTALL_TASK"
    exit 1
fi

export CP_DCV_DESKTOP_PORT="${CP_DCV_DESKTOP_PORT:-$(echo $CP_CAP_DCV_DESKTOP_PORT)}"
if [ -z $CP_DCV_DESKTOP_PORT ]; then
    pipe_log_warn "DCV desktop port is not set (CP_DCV_DESKTOP_PORT)." "$DCV_INSTALL_TASK"
fi
check_dcv_installation
IS_DCV_INSTALLED=$?

if [ $IS_DCV_INSTALLED -eq 0]; then
   pipe_log_info "--> DCV installed already" "$DCV_INSTALL_TASK"
   exit 0
else
   install_prerequisites
   install_dcv
   run_dcv
fi