#!/bin/bash

# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The following environment variables shall be set
# CP_API_JWT_ADMIN
# CP_API_SRV_INTERNAL_HOST
# CP_API_SRV_INTERNAL_PORT
# CP_PREF_STORAGE_SYSTEM_STORAGE_NAME
# CP_PREF_STORAGE_SCHEMA
# CP_LOGGER_CYCLE_TIMEOUT
# CP_LOGGER_SOURCE_DIRECTORY

echo "Install jq"
curl -sL "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64" -o /usr/bin/jq
chmod +x /usr/bin/jq

echo "Install pipe cli"
curl -k -s https://$CP_API_SRV_INTERNAL_HOST:$CP_API_SRV_INTERNAL_PORT/pipeline/pipe -o /pipe
chmod +x /pipe
/pipe configure  --auth-token "$CP_API_JWT_ADMIN" \
                 --api https://$CP_API_SRV_INTERNAL_HOST:$CP_API_SRV_INTERNAL_PORT/pipeline/restapi/ \
                 --timezone local \
                 --proxy ''

echo "Getting system storage name"
if [ -z "$CP_PREF_STORAGE_SYSTEM_STORAGE_NAME" ]; then
    echo "Trying to get a system storage name from the API preference"

    CP_LOGGER_SYSTEM_STORAGE_NAME=$(curl -k -s \
                                --header "Authorization: Bearer $CP_API_JWT_ADMIN" \
                                "https://$CP_API_SRV_INTERNAL_HOST:$CP_API_SRV_INTERNAL_PORT/pipeline/restapi/preferences/storage.system.storage.name" | \
                            jq -r '.payload.value // "NA"')

    if [ "$CP_LOGGER_SYSTEM_STORAGE_NAME" == "NA" ]; then
        echo "Unable to get system storage name from the API preference"
        exit 1
    fi
else 
    echo "System storage name is defined via CP_PREF_STORAGE_SYSTEM_STORAGE_NAME variable"
    CP_LOGGER_SYSTEM_STORAGE_NAME=$CP_PREF_STORAGE_SYSTEM_STORAGE_NAME
fi

CP_PREF_STORAGE_SCHEMA=${CP_PREF_STORAGE_SCHEMA:-"cp"}
CP_LOGGER_CYCLE_TIMEOUT=${CP_LOGGER_CYCLE_TIMEOUT:-30}
CP_LOGGER_SOURCE_DIRECTORY=${CP_LOGGER_SOURCE_DIRECTORY:-"/var/log/kubelet"}
echo "Starting copy loop. Logs transfer will occur each $CP_LOGGER_CYCLE_TIMEOUT seconds"
while : ; do
    if [ ! -d "$CP_LOGGER_SOURCE_DIRECTORY" ]; then
        echo "Log directory does not exist at $CP_LOGGER_SOURCE_DIRECTORY"
    elif [ $(ls $CP_LOGGER_SOURCE_DIRECTORY | wc -l) == 0  ]; then
        echo "Log directory $CP_LOGGER_SOURCE_DIRECTORY is empty"
    else
        IFS="." read -ra log_file_parts <<< $(ls $CP_LOGGER_SOURCE_DIRECTORY/kubelet.*.log.* | head -n 1)
        CP_LOGGER_NODE_NAME="${log_file_parts[1]}"

        CP_LOGGER_COPY_CMD="/pipe storage cp \"$CP_LOGGER_SOURCE_DIRECTORY/\" \
                            \"$CP_PREF_STORAGE_SCHEMA://$CP_LOGGER_SYSTEM_STORAGE_NAME/logs/nodes/$CP_LOGGER_NODE_NAME/$(basename $CP_LOGGER_SOURCE_DIRECTORY)/\" \
                            --recursive \
                            --force  \
                            --include \"kubelet.*.log.*\" \
                            --quiet"
        echo "Copying logs using a command:"
        echo "$CP_LOGGER_COPY_CMD"
        eval $CP_LOGGER_COPY_CMD
    fi
    sleep $CP_LOGGER_CYCLE_TIMEOUT
done
