#!/usr/bin/env bash

# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

MOUNT_DIR="$1"
PUBLISH_DIR="$2"
ALLOWED_CLIENTS="$3"
FS_SETUP_TASK="InitializeSharedFS"

pipe_log_info "Started cluster shared FS setup" "$FS_SETUP_TASK"


######################################################
# Check input parameters
######################################################
if [ -z "$MOUNT_DIR" ]
then
    pipe_log_fail "Directory to export is not defined, exiting" "$FS_SETUP_TASK"
    exit 1
fi
if [ -z "$ALLOWED_CLIENTS" ]
then
    ALLOWED_CLIENTS="*"
    pipe_log_warn "List of allowed clients is not defined, defaulting to ALL(*)" "$FS_SETUP_TASK"
fi


######################################################
# Check if NFS server is already installed
######################################################
/usr/bin/rpm -q -f /usr/bin/rpm >/dev/null 2>&1
IS_RPM_BASED=$?

if [[ "$IS_RPM_BASED" = 0 ]]
then
    CHECK_CMD="rpm -qa | grep nfs-utils"
    INSTALL_CMD="yum install nfs-utils -y -q"
else
    CHECK_CMD="dpkg -l | grep nfs-kernel-server"
    INSTALL_CMD="apt-get install nfs-kernel-server -y -qq"
fi

NFS_SRV_INSTALLED=$(eval "$CHECK_CMD")


######################################################
# If NFS server is already installed - skip installation, otherwise install
######################################################
if [[ $NFS_SRV_INSTALLED = "" ]]
then
    pipe_log_info "--> NFS server not found, proceeding with installation" "$FS_SETUP_TASK"
    pipe_log_info "--> Installing NFS server" "$FS_SETUP_TASK"
    eval "$INSTALL_CMD"
    if [ $? -ne 0 ]
    then
        pipe_log_fail "Failed to install NFS server, process will not continue with shared FS initialization" "$FS_SETUP_TASK"
        exit 1
    fi
    pipe_log_info "--> NFS server installed" "$FS_SETUP_TASK"
else
    pipe_log_info "--> NFS server is already installed" "$FS_SETUP_TASK"
fi


######################################################
# Add port information to /etc/services
######################################################
sed -i '/nfs/d' /etc/services
echo "nfs 2049/tcp" >> /etc/services
echo "nfs 2049/udp" >> /etc/services


######################################################
# Add MOUNT_DIR to /etc/exports, if it exists - overwrite its config
######################################################
if [ ! -f /etc/exports ]
then
    touch /etc/exports
fi

CP_CAP_NFS_SYNC_MODE="${CP_CAP_NFS_SYNC_MODE:-sync}"

EXPORT_CONFIG_STRING=
EXPORT_CONFIG_STRING_TMPL="(rw,no_subtree_check,${CP_CAP_NFS_SYNC_MODE},no_root_squash,fsid=0)"
if [[ $ALLOWED_CLIENTS = "*" ]]
then
    EXPORT_CONFIG_STRING="*$EXPORT_CONFIG_STRING_TMPL"
else
    for CLIENT in $ALLOWED_CLIENTS
    do
        EXPORT_CONFIG_STRING="$CLIENT$EXPORT_CONFIG_STRING_TMPL $EXPORT_CONFIG_STRING"
    done
fi

if [[ "$MOUNT_DIR" =~ ^/common ]]
then
    pipe_log_info "--> Exporting $MOUNT_DIR folder to available mounts" "$FS_SETUP_TASK"
    mkdir -p $MOUNT_DIR
    chmod 777 $MOUNT_DIR

    # If data is present in a PUBLISH_DIR - move it to a MOUNT_DIR
    if [ "$(ls -A $PUBLISH_DIR)" ]; then
        pipe_log_info "--> $PUBLISH_DIR is not empty, moving it under $MOUNT_DIR, $MOUNT_DIR will be cleaned" "$FS_SETUP_TASK"
        rm -rf $MOUNT_DIR/*
        mv $PUBLISH_DIR/* $MOUNT_DIR/
        if [ $? -ne 0 ]
        then
            pipe_log_warn "--> $PUBLISH_DIR was not moved to $MOUNT_DIR, process will proceed" "$FS_SETUP_TASK"
        fi
    fi

    if grep -q ^$MOUNT_DIR /etc/exports
    then
        sed -i 's@^'"$MOUNT_DIR"'.*$@'"$MOUNT_DIR"' '"$EXPORT_CONFIG_STRING"'@' /etc/exports
    else
        echo "$MOUNT_DIR $EXPORT_CONFIG_STRING" >> /etc/exports  
    fi
else
    pipe_log_fail "$MOUNT_DIR is not exported to NFS, process will not continue with shared FS initialization" "$FS_SETUP_TASK"
    exit 1
fi




######################################################
# Reload NFS configuration to apply changes to /etc/exports
######################################################
pipe_log_info "--> Reloading NFS server config" "$FS_SETUP_TASK"

# Set threads count for nfsd
if [ -z "$CP_CAP_NFS_THREADS" ]; then
    CP_CAP_NFS_THREADS=$(nproc)
    CP_CAP_NFS_THREADS=$(($CP_CAP_NFS_THREADS * 2))
    CP_CAP_NFS_THREADS=$((CP_CAP_NFS_THREADS < 32 ? CP_CAP_NFS_THREADS : 32))
fi

rpcbind && \
rpc.statd && \
rpc.nfsd --no-nfs-version 3 --nfs-version 4.1 ${CP_CAP_NFS_THREADS} && \
exportfs -av && \
rpc.mountd

if [ $? -ne 0 ]
then
    pipe_log_warn "Errors occured while reloading NFS server, process will still proceed. See any messages above" "$FS_SETUP_TASK"
fi
pipe_log_success "Done with cluster shared FS setup" "$FS_SETUP_TASK"
