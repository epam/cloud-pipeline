/*
 * Copyright 2017-2021 EPAM Systems, Inc. (https://www.epam.com/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.epam.pipeline.dao.tool;

import com.epam.pipeline.dao.docker.DockerRegistryDao;
import com.epam.pipeline.entity.pipeline.DockerRegistry;
import com.epam.pipeline.entity.pipeline.Tool;
import com.epam.pipeline.entity.pipeline.ToolGroup;
import com.epam.pipeline.entity.pipeline.ToolScanStatus;
import com.epam.pipeline.entity.scan.ToolOSVersion;
import com.epam.pipeline.entity.scan.ToolVersionScanResult;
import com.epam.pipeline.entity.scan.Vulnerability;
import com.epam.pipeline.entity.scan.VulnerabilitySeverity;
import com.epam.pipeline.test.jdbc.AbstractJdbcTest;
import com.epam.pipeline.util.TestUtils;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static com.epam.pipeline.dao.tool.ToolDaoTest.generateTool;

@Transactional
public class ToolVulnerabilityDaoTest extends AbstractJdbcTest {

    private static final String LATEST_VERSION = "latest";
    private static final String PREV = "prev";

    @Autowired
    private ToolVulnerabilityDao toolVulnerabilityDao;

    @Autowired
    private ToolDao toolDao;

    @Autowired
    private ToolGroupDao toolGroupDao;

    @Autowired
    private DockerRegistryDao dockerRegistryDao;

    private ObjectMapper objectMapper = new ObjectMapper();

    private Tool tool;

    @Before
    public void setUp() throws Exception {
        DockerRegistry registry = DockerRegistryDaoTest.getDockerRegistry();
        dockerRegistryDao.createDockerRegistry(registry);

        ToolGroup group = ToolGroupDaoTest.getToolGroup("test", registry);
        toolGroupDao.createToolGroup(group);

        tool = generateTool();
        tool.setToolGroupId(group.getId());
        tool.setRegistryId(registry.getId());
        toolDao.createTool(tool);
    }

    @Test
    public void testLoadVulnerabilities() {
        Vulnerability vulnerability = createVulnerability(tool, LATEST_VERSION);

        List<Vulnerability> vulnerabilities = toolVulnerabilityDao.loadVulnerabilities(tool.getId(), LATEST_VERSION);
        Assert.assertFalse(vulnerabilities.isEmpty());

        Vulnerability loaded = vulnerabilities.get(0);
        TestUtils.checkEquals(vulnerability, loaded, objectMapper);
    }

    @Test
    public void testLoadVulnerabilitiesByVersion() {
        Vulnerability prevVulnerability = createVulnerability(tool, PREV, "test1", "feature-1", PREV);
        Vulnerability latestVulnerability = createVulnerability(tool, LATEST_VERSION,
                "test2", "feature-2", LATEST_VERSION);

        List<Vulnerability> vulnerabilities = toolVulnerabilityDao.loadVulnerabilities(tool.getId(), PREV);
        Assert.assertTrue(vulnerabilities.size() == 1);
        Vulnerability loaded = vulnerabilities.get(0);
        TestUtils.checkEquals(prevVulnerability, loaded, objectMapper);

        vulnerabilities = toolVulnerabilityDao.loadVulnerabilities(tool.getId(), LATEST_VERSION);
        Assert.assertTrue(vulnerabilities.size() == 1);
        loaded = vulnerabilities.get(0);
        TestUtils.checkEquals(latestVulnerability, loaded, objectMapper);
    }

    @Test
    public void testDeleteVulnerabilities() {
        createVulnerability(tool, LATEST_VERSION);
        Assert.assertFalse(toolVulnerabilityDao.loadVulnerabilities(tool.getId(), LATEST_VERSION).isEmpty());

        toolVulnerabilityDao.deleteVulnerabilities(tool.getId(), LATEST_VERSION);

        Assert.assertTrue(toolVulnerabilityDao.loadVulnerabilities(tool.getId(), LATEST_VERSION).isEmpty());
    }

    @Test
    public void shouldSaveAndLoadVersionWithVulnerabilitiesCount() {
        final HashMap<VulnerabilitySeverity, Integer> vulnerabilitiesCount = new HashMap<>();
        vulnerabilitiesCount.put(VulnerabilitySeverity.Critical, 1);
        vulnerabilitiesCount.put(VulnerabilitySeverity.Medium, 2);
        toolVulnerabilityDao.insertToolVersionScan(tool.getId(), LATEST_VERSION,
                new ToolOSVersion("centos", "7"), "", "digest",
                ToolScanStatus.COMPLETED, new Date(), vulnerabilitiesCount);
        final Optional<ToolVersionScanResult> result = toolVulnerabilityDao
                .loadToolVersionScan(tool.getId(), LATEST_VERSION);
        Assert.assertTrue(result.isPresent());
        Assert.assertEquals(vulnerabilitiesCount, result.get().getVulnerabilitiesCount());
    }

    @Test
    public void shouldLoadVulnerabilitiesCount() {
        createVulnerability(tool, LATEST_VERSION);
        createVulnerability(tool, LATEST_VERSION);
        createVulnerability(tool, PREV);
        final Map<String, Map<VulnerabilitySeverity, Integer>> result =
                toolVulnerabilityDao.loadVulnerabilityCount(tool.getId(), Collections.singletonList(LATEST_VERSION));
        final Map<VulnerabilitySeverity, Integer> versionResult = result.get(LATEST_VERSION);
        Assert.assertEquals(1, versionResult.size());
        final int highCount = versionResult.get(VulnerabilitySeverity.High);
        Assert.assertEquals(2, highCount);
    }

    private Vulnerability createVulnerability(Tool tool, String version) {
        return createVulnerability(tool, version, "test", "testFeature", "testVersion");
    }

    private Vulnerability createVulnerability(Tool tool, String version, String name,
                                              String feature, String featureVersion) {
        Vulnerability vulnerability = buildVulnerability(name, feature, featureVersion);

        toolVulnerabilityDao.createVulnerabilityRecords(Collections.singletonList(vulnerability),
                tool.getId(), version);
        return vulnerability;
    }


    private Vulnerability buildVulnerability(String name, String feature, String featureVersion) {
        Vulnerability vulnerability = new Vulnerability();
        vulnerability.setCreatedDate(new Date());
        vulnerability.setName(name);
        vulnerability.setDescription("testDescription");
        vulnerability.setLink("///");
        vulnerability.setSeverity(VulnerabilitySeverity.High);
        vulnerability.setFeature(feature);
        vulnerability.setFeatureVersion(featureVersion);
        vulnerability.setFixedBy("testFixer");
        return vulnerability;
    }
}
