#!/bin/bash

# Copyright 2023 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

function check_service_is_ready {
    health_status=$(curl -s "http://localhost:$PORT/health" | jq -r -e ".online==true")
    if [ "$health_status" ]; then
        return 0
    else
        return 1
    fi
}

DB_CONFIG="$CP_STATPING_HOME/config.yml"
TEMPLATE_DB_CONFIG="$CP_STATPING_HOME/templates/config_template.yml"
if [ -f "$TEMPLATE_DB_CONFIG" ]; then
    export CP_STATPING_DATABASE_TYPE="${CP_STATPING_DATABASE_TYPE:-sqlite}"
    export CP_STATPING_DATABASE_HOST="${CP_STATPING_DATABASE_HOST:-localhost}"
    export CP_STATPING_DATABASE_PORT="${CP_STATPING_DATABASE_PORT:-3306}"
    export CP_STATPING_DATABASE_USERNAME="${CP_STATPING_DATABASE_USERNAME:-admin}"
    export CP_STATPING_DATABASE_PASSWORD="${CP_STATPING_DATABASE_PASSWORD:-admin}"
    export CP_STATPING_DATABASE_DATABASE="${CP_STATPING_DATABASE_DATABASE:-statpingdb}"
    export CP_STATPING_API_SECRET="${CP_STATPING_API_SECRET:-apisecretcanbeset}"
    export CP_STATPING_DIR="${CP_STATPING_DIR:-/opt/statping}"
    STATPING_DB_CONF="$(envsubst '${CP_STATPING_DATABASE_TYPE} ${CP_STATPING_DATABASE_HOST} ${CP_STATPING_DATABASE_PORT} ${CP_STATPING_DATABASE_USERNAME} ${CP_STATPING_DATABASE_PASSWORD} ${CP_STATPING_DATABASE_DATABASE} ${CP_STATPING_API_SECRET} ${CP_STATPING_DIR} ${CP_STATPING_DOMAIN}' < $TEMPLATE_DB_CONFIG)"
    echo "$STATPING_DB_CONF" > $DB_CONFIG

    CONFIG_ARG="--config $DB_CONFIG"
else
    echo "The custom db config file was not defined. The default settings will be used."
    CONFIG_ARG=""
fi

TEMPLATE_SERVICES_CONFIG="$CP_STATPING_HOME/templates/services_template.yml"
SERVICES_CONFIG="$CP_STATPING_HOME/services.yml"
if [ ! -f "$TEMPLATE_SERVICES_CONFIG" ]; then
    echo "The custom services config file was not found. The default settings will be used."
else
    STATPING_SERVICES_CONF="$(envsubst '${CP_API_TOKEN} ${CP_API}' < $TEMPLATE_SERVICES_CONFIG)"
    echo "$STATPING_SERVICES_CONF" > $SERVICES_CONFIG
fi

STATPING_RUNTIME_LOG=$CP_STATPING_HOME/logs/runtime.log
mkdir -p $(dirname $STATPING_RUNTIME_LOG)
touch $STATPING_RUNTIME_LOG

nohup statping --port $PORT $CONFIG_ARG &> $STATPING_RUNTIME_LOG &
APP_PID="$!"

echo "Waiting for Statping service readiness..."
STATPING_INIT_ATTEMPTS="${STATPING_INIT_ATTEMPTS:-24}"
try_count=0
while ! check_service_is_ready && [ $try_count -lt $STATPING_INIT_ATTEMPTS ]; do
    sleep 5
    try_count=$(( $try_count + 1 ))
done
if ! check_service_is_ready; then
    echo "Failed to start up Statping service. Exiting..."
    exit 1
else
    echo "Statping service is ready"
fi

STATPING_EMAIL_JSON_TEMPLATE="$CP_STATPING_HOME/templates/email_template.json"
STATPING_EMAIL_JSON="$CP_STATPING_HOME/email_template.json"
if [ -f "$STATPING_EMAIL_JSON_TEMPLATE" ]; then
      STATPING_EMAIL_JSON_CONTENT="$(envsubst '${CP_NOTIFIER_SMTP_SERVER_HOST} ${CP_NOTIFIER_SMTP_SERVER_PORT} ${CP_NOTIFIER_SMTP_USER} ${CP_NOTIFIER_SMTP_PASS} ${CP_NOTIFIER_SMTP_FROM} ${CP_NOTIFIER_EMAIL_TO}' < $STATPING_EMAIL_JSON_TEMPLATE)"
      echo "$STATPING_EMAIL_JSON_CONTENT" > $STATPING_EMAIL_JSON
      curl --location -g localhost:$PORT/api/notifier/email \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer '"$CP_STATPING_API_SECRET"  \
            --data @$STATPING_EMAIL_JSON
fi
STATPING_TELEGRAM_JSON_TEMPLATE="$CP_STATPING_HOME/templates/telegram_template.json"
STATPING_TELEGRAM_JSON="$CP_STATPING_HOME/telegram_template.json"
if [ -f "$STATPING_TELEGRAM_JSON_TEMPLATE" ]; then
      STATPING_TELEGRAM_JSON_CONTENT="$(envsubst '${CP_TELEGRAM_API_TOKEN} ${CP_TELEGRAM_CHANNEL_ID}' < $STATPING_TELEGRAM_JSON_TEMPLATE)"
      echo "$STATPING_TELEGRAM_JSON_CONTENT" > $STATPING_TELEGRAM_JSON
      curl --location -g localhost:$PORT/api/notifier/telegram \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer '"$CP_STATPING_API_SECRET"  \
              --data @$STATPING_TELEGRAM_JSON
fi

function sig_handler {
    echo "Got SIGTERM, stopping PID $APP_PID and exiting"
    if [ $APP_PID -ne 0 ]; then
        kill -SIGTERM "$APP_PID"
        wait "$APP_PID"
    fi
    exit 143
}

trap 'kill $! ; sig_handler' SIGTERM
tail -F $STATPING_RUNTIME_LOG &
wait "$!"
