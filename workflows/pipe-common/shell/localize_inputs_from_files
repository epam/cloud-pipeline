#!/usr/bin/env bash

# Copyright 2017-2021 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# FIXME: Refactor `for` loops. No need to go over the same array several times.

LOCALIZE_GENERAL_TASK_NAME="${1:-InputData}"
LOCALIZE_FROM_FILES_TASK_NAME="${2:-InputDataConfigs}"

if [ -z "$CP_LOCALIZE_FROM_FILES" ]; then
    pipe_log_info "Localization from the config files is not requested" "$LOCALIZE_GENERAL_TASK_NAME"
    exit 1
fi

pipe_log_info "Will localize any remotes from the config files, defined by the following parameters: $CP_LOCALIZE_FROM_FILES" "$LOCALIZE_FROM_FILES_TASK_NAME"

CP_LOCALIZE_FROM_FILES_EXT="${CP_LOCALIZE_FROM_FILES_EXT:-*}"
CP_LOCALIZE_FROM_FILES_ENV_VARS_SUFFIX="${CP_LOCALIZE_FROM_FILES_ENV_VARS_SUFFIX:-_PARAM_TYPE_FROM_FILE}"
CP_LOCALIZE_FROM_FILES_RE_PATTERN="${CP_LOCALIZE_FROM_FILES_RE_PATTERN:-((s3|gs|az):\/\/.*(,|;|$))}"

pipe_log_info "--> Files extensions: $CP_LOCALIZE_FROM_FILES_EXT" "$LOCALIZE_FROM_FILES_TASK_NAME"
pipe_log_info "--> Env vars suffix: $CP_LOCALIZE_FROM_FILES_ENV_VARS_SUFFIX" "$LOCALIZE_FROM_FILES_TASK_NAME"
pipe_log_info "--> RE pattern: $CP_LOCALIZE_FROM_FILES_RE_PATTERN" "$LOCALIZE_FROM_FILES_TASK_NAME"

# Collect files, which may contain "localizable" values
pipe_log_info "Collecting files, which may contain 'localizable' values" "$LOCALIZE_FROM_FILES_TASK_NAME"
_env_var_list="${$CP_LOCALIZE_FROM_FILES//,/ }"
_files_to_localize=()
for _x in $CP_LOCALIZE_FROM_FILES; do
    _param_value=${!_x}
    _paths_list=$(sed -E 's/[,;]+/ /g' <<< "$_param_value")
    for _path in $_paths_list; do
        if [ -z "$_path" ]; then
            pipe_log_warn "Variable '$_x' (from CP_LOCALIZE_FROM_FILES) is empty, skipping" "$LOCALIZE_FROM_FILES_TASK_NAME"
            continue
        fi
        if [ -d "$_path" ]; then
            _files_list=$(find ${_path}/ -name "$CP_LOCALIZE_FROM_FILES_EXT" -type f)
        elif [ -f "$_path" ]; then
            _files_list="$_path"
        else
            pipe_log_warn "Path(s) defined by '$_x' parameter do not exist: $_path" "$LOCALIZE_FROM_FILES_TASK_NAME"
            continue
        fi
        _files_to_localize+=($_files_list)
    done
done

if [ ${#_files_to_localize[@]} == 0 ]; then
    pipe_log_fail "No files were found to search for the remote URLs" "$LOCALIZE_FROM_FILES_TASK_NAME"
    exit 1
else
    pipe_log_info "--> The following files will be processed: $(echo ${_files_to_localize[@]})" "$LOCALIZE_FROM_FILES_TASK_NAME"
fi

# Search for the matching remote URLs in a file and export them as env vars
pipe_log_info "Searching for the matching remote URLs in the files" "$LOCALIZE_FROM_FILES_TASK_NAME"
_has_something_to_localize=false
for _path in ${_files_to_localize[@]}; do
    _file_as_env_var=$(sed -E 's/[^[:alnum:][:space:]]+/_/g' <<< "$_path")
    i=1
    while IFS= read -r _match; do
        _match_env_var_name="${_file_as_env_var}_${i}"
        declare -x "${_match_env_var_name}"="$_match"
        declare -x "${_match_env_var_name}${CP_LOCALIZE_FROM_FILES_ENV_VARS_SUFFIX}"="input"
        i=$((i+1))
        _has_something_to_localize=true
    done <<< "$(grep -oP "$CP_LOCALIZE_FROM_FILES_RE_PATTERN" "$_path")"
done

if [ "$_has_something_to_localize" != "true" ]; then
    pipe_log_fail "Nothing to localize, nothing matched with a '$CP_LOCALIZE_FROM_FILES_RE_PATTERN' pattern" "$LOCALIZE_FROM_FILES_TASK_NAME"
    exit 1
else
    pipe_log_info "--> Got remote URLs matches across the files" "$LOCALIZE_FROM_FILES_TASK_NAME"
fi

# Run localization job once again to download any remotes
pipe_log_info "Running data localization for the matched remotes" "$LOCALIZE_FROM_FILES_TASK_NAME"
_input_env_from_files=${RUN_DIR}/input-env-from-files.txt
python2 ${COMMON_REPO_DIR}/scripts/transfer_parameters.py \
        --input-dir ${INPUT_DIR} \
        --analysis-dir ${ANALYSIS_DIR} \
        --common-dir ${COMMON_DIR} \
        --task ${LOCALIZE_FROM_FILES_TASK_NAME} \
        --report-file $_input_env_from_files \
        --operation upload \
        --env-suffix ${CP_LOCALIZE_FROM_FILES_ENV_VARS_SUFFIX}

if [ $? -ne 0 ]; then
    pipe_log_fail "Localization failed with a non-zero exit code, see output above" "$LOCALIZE_FROM_FILES_TASK_NAME"
    exit 1
fi
if [ ! -f $_input_env_from_files ]; then
    pipe_log_fail "Localization step succeeded but environment data was not found in $_input_env_from_files" "$LOCALIZE_FROM_FILES_TASK_NAME"
    exit 1
fi
source $_input_env_from_files
pipe_log_info "--> Remotes were localized fine, see output above" "$LOCALIZE_FROM_FILES_TASK_NAME"

# Replace remote URLs with the localized
pipe_log_info "Replacing remote URLs with the localized path across the files" "$LOCALIZE_FROM_FILES_TASK_NAME"
for _path in ${_files_to_localize[@]}; do
    pipe_log_info "--> Processing: $_path" "$LOCALIZE_FROM_FILES_TASK_NAME"
    _file_as_env_var=$(sed -E 's/[^[:alnum:][:space:]]+/_/g' <<< "$_path")
    i=1
    while true; do
        _local_path="${_file_as_env_var}_${i}"
        _remote_path="${_local_path}_ORIGINAL"
        _local_path="${!_local_path}"
        _remote_path="${!_remote_path}"

        if [ -z "$_local_path" ] || [ -z "$_remote_path" ]; then
            break
        fi

        sed -i "s|$_remote_path|$_local_path|g" "$_path"

        i=$((i+1))

        if (($i>1000)); then
            pipe_log_want "Looks like we've ran into an endless loop for ${_path} file, skipping further iterations" "$LOCALIZE_FROM_FILES_TASK_NAME"
            break
        fi
    done
done
pipe_log_info "--> Replacement is done" "$LOCALIZE_FROM_FILES_TASK_NAME"

pipe_log_success "Config file based localization is done" "$LOCALIZE_FROM_FILES_TASK_NAME"
