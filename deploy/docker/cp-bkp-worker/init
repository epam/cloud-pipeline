#!/bin/bash

# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

esc_env() {
    printf '"%s";' "$(LC_ALL=C sed 's/["]/\\&/g' <<<"$1")"
}

save_env() {
    for var in $(compgen -e); do
        echo "export $var=$(esc_env "${!var}")"
    done
}


echo "Install jq"
curl -sL "https://cloud-pipeline-oss-builds.s3.amazonaws.com/tools/jq/jq-1.6/jq-linux64" -o /usr/bin/jq
chmod +x /usr/bin/jq

echo "Install pipe cli"
CP_BKP_PIPE_INSTALL_ATTEMPTS="${CP_BKP_PIPE_INSTALL_ATTEMPTS:-60}"
for _pipe_install_attempt in $(seq 1 $CP_BKP_PIPE_INSTALL_ATTEMPTS); do
    curl -k -s -f https://$CP_API_SRV_INTERNAL_HOST:$CP_API_SRV_INTERNAL_PORT/pipeline/pipe -o /pipe
    if [ $? -eq 0 ] && [ -f /pipe ]; then
        _pipe_installed="true"
        echo "pipe cli has been installed"
        break
    else
        echo "[WARN] Cannot download pipe cli. Attempt $_pipe_install_attempt out of $CP_BKP_PIPE_INSTALL_ATTEMPTS"
    fi
    sleep 10
done

if [ "$_pipe_installed" != "true" ]; then
    echo "[ERROR] Cannot install pipe cli"
    exit 1
fi

chmod +x /pipe
/pipe configure  --auth-token "$CP_API_JWT_ADMIN" \
                 --api https://$CP_API_SRV_INTERNAL_HOST:$CP_API_SRV_INTERNAL_PORT/pipeline/restapi/ \
                 --timezone local \
                 --proxy ''

echo "Install kubectl"
CP_KUBECTL_URL="${CP_KUBECTL_URL:-https://cloud-pipeline-oss-builds.s3.amazonaws.com/tools/kube/current/kubectl}"
curl -k -s "$CP_KUBECTL_URL" -o /kubectl
chmod +x /kubectl

echo "Setup cron"
export CP_BKP_SCHEDULE_CRON=${CP_BKP_SCHEDULE_CRON:-'0 8 * * *'} # Every day at 8 A.M.
save_env > /backup.env
echo "$CP_BKP_SCHEDULE_CRON root flock -w 1 /var/run/backup.lock bash /backup.sh" > /etc/cron.d/cp-backup
chmod 0644 /etc/cron.d/cp-backup

# Run cron
crond -n -s &
APP_PID="$!"

sleep 5

# Workaround the container hanging when being terminated
function sig_handler {
    echo "Got SIGTERM, stopping PID $APP_PID and exiting"
    if [ $APP_PID -ne 0 ]; then
        kill -SIGTERM "$APP_PID"
        wait "$APP_PID"
    fi
    exit 143
}
trap 'sig_handler' SIGTERM
wait "$APP_PID"
