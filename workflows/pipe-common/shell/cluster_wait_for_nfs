# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

MASTER_RUN_ID="$1"
SHARED_PATH="$2"

FS_SETUP_TASK="InitializeFSClient"

######################################################
# Check input parameters
######################################################
if [ -z "$SHARED_PATH" ]
then
    pipe_log_fail "Shared directory is not defined, exiting" "$FS_SETUP_TASK"
    exit 1
fi
if [ -z "$MASTER_RUN_ID" ]
then
    pipe_log_fail "Master node run id is not defined, exiting" "$FS_SETUP_TASK"
    exit 1
fi


######################################################
# Wait for NFS node
######################################################
NFS_INFO_RESULT=$(eval "$CP_PYTHON2_PATH ${COMMON_REPO_DIR}/scripts/cluster_wait_for_node.py --run-id ${MASTER_RUN_ID} --task-name InitializeSharedFS")

if [ $? -ne 0 ]
then
    exit 1
fi

NFS_INFO=($NFS_INFO_RESULT)
NFS_NAME=${NFS_INFO[-2]}
NFS_IP=${NFS_INFO[-1]}

if [ -z "$NFS_IP" ]
then
    pipe_log_fail "NFS node IP is not defined, exiting" "$FS_SETUP_TASK"
    exit 1
else
    pipe_log_info "NFS node IP: ${NFS_IP}" "$FS_SETUP_TASK"
fi
if [ -z "$NFS_NAME" ]
then
    pipe_log_fail "NFS node name is not defined, exiting" "$FS_SETUP_TASK"
    exit 1
else
    pipe_log_info "NFS node name: ${NFS_NAME}" "$FS_SETUP_TASK"
fi

pipe_log_info "Started worker shared FS setup" "$FS_SETUP_TASK"

######################################################
# Install NFS client if not installed
######################################################
CP_CAP_SHARE_FS_TYPE="${CP_CAP_SHARE_FS_TYPE:-lfs}"

if [ "$CP_CAP_SHARE_FS_TYPE" == "nfs" ]; then
    install_nfs_client

    #####################################################
    # MOUNT NFS Folder to worker node
    #####################################################
    CP_CAP_NFS_ACTIMEO="${CP_CAP_NFS_ACTIMEO:-0}"

    MOUNT_CMD="mkdir -p ${SHARED_PATH} && rm -rf ${SHARED_PATH}/* && mount ${NFS_IP}:/ ${SHARED_PATH} -t nfs4 -o actimeo=${CP_CAP_NFS_ACTIMEO}",nfsvers=4.1
    eval "$MOUNT_CMD"
    if [ $? -ne 0 ]
    then
        pipe_log_fail "Failed to mount NFS to worker node" "$FS_SETUP_TASK"
        exit 1
    else
        pipe_log_info "Successfully mounted NFS folder to worker node" "$FS_SETUP_TASK"
    fi
elif [ "$CP_CAP_SHARE_FS_TYPE" == "lfs" ]; then
    if [ "$cluster_role" != "worker" ] || [ "$cluster_role_type" != "additional" ]
    then
        cluster_setup_shared_fs_lfs_chunk "$MASTER_RUN_ID" "/mnt/chunks"
        if [ $? -ne 0 ]; then
            exit 1
        fi
    fi

    install_lfs_client

    #####################################################
    # MOUNT LFS Folder to worker node
    #####################################################

    if ! grep "lizardfs-master" /etc/hosts -q; then
        echo "$NFS_IP" lizardfs-master >> /etc/hosts
    fi
    if [ "${CP_CAP_NFS_MOUNT_OPTIONS}" ]
    then
        MOUNT_OPTIONS="${CP_CAP_NFS_MOUNT_OPTIONS}"
    else
        MOUNT_OPTIONS="-o big_writes,nosuid,nodev,noatime -o cacheexpirationtime=5000 -o readaheadmaxwindowsize=4096"
    fi
    if [ "${CP_CAP_NFS_DEBUG}" == "true" ] || [ "${CP_CAP_NFS_DEBUG}" == "yes" ]; then
        MOUNT_OPTIONS="${MOUNT_OPTIONS} -o debug"
    fi
    mkdir -p ${SHARED_PATH} && \
    rm -rf ${SHARED_PATH}/* && \
    nohup mfsmount -f -H lizardfs-master ${MOUNT_OPTIONS} ${SHARED_PATH} > /var/log/mfsmount.out 2>&1 &
    
    if [ $? -ne 0 ]
    then
        pipe_log_fail "Failed to mount LFS to worker node" "$FS_SETUP_TASK"
        exit 1
    else
        pipe_log_info "Successfully mounted LFS folder to worker node" "$FS_SETUP_TASK"
    fi
else
    pipe_log_fail "Shared FS type '${CP_CAP_SHARE_FS_TYPE}' is not supported, exiting" "$FS_SETUP_TASK"
fi

pipe_log_success "Finished Shared FS client setup" "$FS_SETUP_TASK"
