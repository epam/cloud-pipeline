#!/bin/bash

# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

export CP_DOLLAR='$'

function is_dir_empty {
    local dir_path="$1"

    if [ ! -d "$dir_path" ]; then
        mkdir -p "$dir_path"
        return 0
    fi

    shopt -s nullglob
    shopt -s dotglob

    local dir_contents=(${1}/*)

    shopt -u nullglob
    shopt -u dotglob

    local result=0
    (( ${#dir_contents[*]} )) && result=1 || result=0
    return $result
}

function update_config_json_templates {
    local templates_key="$1"
    local external_storage_var_name="$2"
    local search_pattern="${3:-"config.json"}"
    local properties_file="${4:-$CP_API_HOME/config/application.properties}"

    IFS="=" read -r param_key param_value <<< $(grep $templates_key < $properties_file)
    if [ -z "$param_key" ] || [ -z "$param_value" ] || [ ! -d "$param_value" ]; then
        echo "$templates_key cannot be retrieved from $properties_file or that location does not exist (\"$param_value\""
        return 1
    fi

    local external_storage="${!external_storage_var_name}"
    # Import external templates if provided, this overrides the default templates backed into the docker image
    if [ "$external_storage" ]; then
        is_dir_empty "$external_storage"
        if [ $? -eq 0 ]; then
            echo "External configuration for $templates_key template is set, but the $external_storage directory is empty or does not exist. External templates WILL NOT be applied"
        else
            echo "Replacing $templates_key templates from $external_storage to $param_value"
            rm -rf $param_value/*
            \cp -r $external_storage/* $param_value/
        fi
    fi

    echo "Updating configuration files (properties_file: ${properties_file}, templates_key: ${templates_key}, search_pattern: ${search_pattern})"
    for config_json_file in $(find "$param_value" -type f -name "$search_pattern"); do
        local config_json_file_contents="$(envsubst < "$config_json_file")"
        cat <<< "$config_json_file_contents" > "$config_json_file"
        echo "$config_json_file"
    done
    echo
}

# Validate SSO and SSL certificates
if [ -z "$CP_API_SRV_CERT_DIR" ]; then
    export CP_API_SRV_CERT_DIR="/opt/api/pki"
fi

if [ ! -f "$CP_API_SRV_CERT_DIR/cp-api-srv-ssl.p12" ]; then
    echo "SSL p12 key pair not found at $CP_API_SRV_CERT_DIR/cp-api-srv-ssl.p12, but it is required to setup HTTPS for the API Service. Exiting"
    exit 1
fi

if [ ! -f "$CP_API_SRV_CERT_DIR/cp-api-srv-sso.p12" ]; then
    echo "SSO p12 key pair not found at $CP_API_SRV_CERT_DIR/cp-api-srv-sso.p12, but it is required to setup Single Sign-On for the API Service. Exiting"
    exit 1
fi

if [ ! -f "$CP_API_SRV_CERT_DIR/jwt.key.private" ] || [ ! -f "$CP_API_SRV_CERT_DIR/jwt.key.public" ]; then
    echo "JWT private/publuc key pair not found at $CP_API_SRV_CERT_DIR/jwt.key.[public/private], but it is required to setup JWT authentication of the CLI and integrated services. Exiting"
    exit 1
else
    # If JWT keys are found - export their values to initialize application.properties (jwt.key.[public/private])
    export CP_API_JWT_KEY_PUBLIC=$(<$CP_API_SRV_CERT_DIR/jwt.key.public)
    export CP_API_JWT_KEY_PRIVATE=$(<$CP_API_SRV_CERT_DIR/jwt.key.private)
fi

# Validate SSO Federation metadata

if [ -z "$CP_API_SRV_FED_META_DIR" ]; then
    export CP_API_SRV_FED_META_DIR="/opt/api/sso"
fi

if [ ! -f "$CP_API_SRV_FED_META_DIR/cp-api-srv-fed-meta.xml" ]; then
    echo "SSO Metadata not found at $CP_API_SRV_FED_META_DIR/cp-api-srv-fed-meta.xml, but it is required to setup Single Sign-On for the API Service. Exiting"
    exit 1
fi


mkdir -p $CP_API_HOME/keystore/

# Import SSL cert
keytool -importkeystore -deststorepass changeit \
        -destkeypass changeit \
        -destkeystore $CP_API_HOME/keystore/store.jks \
        -srckeystore $CP_API_SRV_CERT_DIR/cp-api-srv-ssl.p12 \
        -srcstoretype PKCS12 \
        -srcstorepass changeit \
        -alias ssl \
        -noprompt

if [ $? -ne 0 ]; then
    echo "An error occured while importing SSL p12 key pair $CP_API_SRV_CERT_DIR/cp-api-srv-ssl.p12 into the API Service. Exiting"
    exit 1
fi

# Import SSO cert
keytool -importkeystore -deststorepass changeit \
        -destkeypass changeit \
        -destkeystore $CP_API_HOME/keystore/store.jks \
        -srckeystore $CP_API_SRV_CERT_DIR/cp-api-srv-sso.p12 \
        -srcstoretype PKCS12 \
        -srcstorepass changeit \
        -alias sso \
        -noprompt

if [ $? -ne 0 ]; then
    echo "An error occured while importing SSO p12 key pair $CP_API_SRV_CERT_DIR/cp-api-srv-sso.p12 into the API Service. Exiting"
    exit 1
fi

ca_cert_path="$CP_COMMON_CERT_DIR/ca-public-cert.pem"
if [ -f "$ca_cert_path" ]; then
    echo "Importing CA cert into global java keystore"
    /update-trust $ca_cert_path "cp-ca"
fi

# Create static distribution directory
export CP_API_SRV_STATIC_DIR="${CP_API_SRV_STATIC_DIR:-$CP_API_HOME/static}"
mkdir -p $CP_API_SRV_STATIC_DIR

echo "Importing API SSL cert into global java keystore"
/update-trust $CP_API_SRV_CERT_DIR/ssl-public-cert.pem "cp-api-srv"

echo "Importing IdP signing cert into API keystore"
keytool  -import \
         -keystore $CP_API_HOME/keystore/store.jks \
         -storepass changeit \
         -noprompt \
         -alias idp \
         -file $CP_IDP_CERT_DIR/idp-public-cert.pem

# Update pipe/folder templates with any specific values (e.g. instance/vm size)
update_config_json_templates "templates.directory" "CP_PREF_TEMPLATES_DIRECTORY_EXT" "config.json"
update_config_json_templates "templates.folder.directory" "CP_PREF_TEMPLATES_FOLDER_DIRECTORY_EXT" "template.json"

# Configure logging and launch
API_RUN_TIME_LOG=$CP_API_HOME/logs/runtime.log
mkdir -p $(dirname $API_RUN_TIME_LOG)
touch $API_RUN_TIME_LOG

nohup java $CP_API_SRV_JAVA_OPTS -jar pipeline.jar &> $API_RUN_TIME_LOG &

sleep 5

tail -F $API_RUN_TIME_LOG
