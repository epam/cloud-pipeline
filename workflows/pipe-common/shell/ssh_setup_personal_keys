#!/usr/bin/env bash

# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

function add_ssh_config {
    local config_path="$1"
    local external_host="$2"
    local internal_host="$3"
    local private_key_path="$4"

#### Remove any existing section (in case of commits/pauses)
sed -i '/# START GIT SSH CONFIG/,/# END GIT SSH CONFIG/d' $config_path
#### Add a new section back
cat >>$config_path <<EOF
# START GIT SSH CONFIG
host $external_host
 HostName $internal_host
 IdentityFile $private_key_path
 User git
host $internal_host
 HostName $internal_host
 IdentityFile $private_key_path
 User git
# END GIT SSH CONFIG
EOF
}

## Common
if [ -z "$OWNER" ]; then
    echo "OWNER is not set, cannot configure personal SSH keys"
    exit 1
fi

OWNER_SSH_DIR=/home/$OWNER/.ssh
OWNER_SSH_PRV_LOCATION=$OWNER_SSH_DIR/id_${OWNER}
OWNER_SSH_PUB_LOCATION=$OWNER_SSH_DIR/id_${OWNER}.pub
OWNER_SSH_PRV_COMMON_LOCATION=$OWNER_SSH_DIR/id_rsa
OWNER_SSH_PUB_COMMON_LOCATION=$OWNER_SSH_DIR/id_rsa.pub
OWNER_SSH_CONFIG_LOCATION=$OWNER_SSH_DIR/config
OWNER_SSH_AUTHORIZED_KEYS=$OWNER_SSH_DIR/authorized_keys
mkdir -p $(dirname $OWNER_SSH_PRV_LOCATION)

## SSH keys configuration

echo "Resolving $OWNER user (id: $OWNER_ID) attributes..."

### Setup user's keys values
OWNER_ATTRIBUTES="$(curl -s \
                    --max-time 30 \
                    --retry 3 \
                    --retry-delay 5 \
                    -X POST \
                    --insecure \
                    --header 'Content-Type: application/json' \
                    --header 'Accept: application/json' \
                    --header "Authorization: Bearer $API_TOKEN" \
                    -d "[ { \"entityId\": $OWNER_ID, \"entityClass\": \"PIPELINE_USER\" } ]" \
                    "$API/metadata/load")"

OWNER_SSH_PRV=$(echo "$OWNER_ATTRIBUTES" | jq -r '.payload[].data.ssh_prv.value // 0')
OWNER_SSH_PUB=$(echo "$OWNER_ATTRIBUTES" | jq -r '.payload[].data.ssh_pub.value // 0')

### Write keys to the ~/.ssh/...
if [ -z "$OWNER_SSH_PRV" ] || [ "$OWNER_SSH_PRV" == 0 ]; then
    echo "[ERROR] Cannot determine owner's SSH private key"
    exit 1
fi

echo "$OWNER_SSH_PRV" > "$OWNER_SSH_PRV_LOCATION"
chown $OWNER "$OWNER_SSH_PRV_LOCATION"
chmod 600 "$OWNER_SSH_PRV_LOCATION"
echo "Owner's SSH private key is written to $OWNER_SSH_PRV_LOCATION"

if [ -z "$OWNER_SSH_PUB" ] || [ "$OWNER_SSH_PUB" == 0 ]; then
    echo "[WARN] Cannot determine owner's SSH public key, will try to generate one with ssh-keygen"
    if command -v ssh-keygen &> /dev/null; then
        OWNER_SSH_PUB=$(ssh-keygen -y -f "$OWNER_SSH_PRV_LOCATION")
        if [ $? -ne 0 ]; then
            echo "[ERROR] Failed generating SSH public key using ssh-keygen"
        else
            echo "SSH public key is generated using ssh-keygen"
        fi
    else
        echo "[WARN] ssh-keygen is not installed, will proceed without a public key"
        OWNER_SSH_PUB=""
    fi
fi

if [ "$OWNER_SSH_PUB" ]; then
    echo "$OWNER_SSH_PUB" > "$OWNER_SSH_PUB_LOCATION"
    chown $OWNER "$OWNER_SSH_PUB_LOCATION"
    chmod 600 "$OWNER_SSH_PUB_LOCATION"
    echo "Owner's SSH public key is written to $OWNER_SSH_PUB_LOCATION"
fi


if [ ! -f "$OWNER_SSH_PRV_COMMON_LOCATION" ]; then
    \cp "$OWNER_SSH_PRV_LOCATION" "$OWNER_SSH_PRV_COMMON_LOCATION"
    \cp "$OWNER_SSH_PUB_LOCATION" "$OWNER_SSH_PUB_COMMON_LOCATION"
    
    if [ -f "$OWNER_SSH_AUTHORIZED_KEYS" ]; then
        sed -i "\|$OWNER_SSH_PUB|d" "$OWNER_SSH_AUTHORIZED_KEYS"
    fi
    echo "$OWNER_SSH_PUB" >> "$OWNER_SSH_AUTHORIZED_KEYS"
fi

## SSH config setup to use newly added keys for git clone/pull/push
### Set external gitlab address
GIT_HOST_EXTERNAL_PREF=$(curl -s \
                --max-time 30 \
                --retry 3 \
                --retry-delay 5 \
                -X GET \
                --insecure \
                --header 'Accept: application/json' \
                --header "Authorization: Bearer $API_TOKEN" \
                "$API/preferences/git.external.url" | jq -r '.payload.value')
GIT_HOST_EXTERNAL_PREF=$($CP_PYTHON2_PATH -c "from urlparse import urlparse; print urlparse('$GIT_HOST_EXTERNAL_PREF').hostname")

if [ -z "$GIT_HOST_EXTERNAL_PREF" ] || [ "$GIT_HOST_EXTERNAL_PREF" == "null" ] || [ "$GIT_HOST_EXTERNAL_PREF" == "None" ]; then
    echo "Cannot get the git.external.url value. Git configuration cannot be finished"
    exit 1
fi

### Set internal gitlab address
GIT_HOST_PREF=$(curl -s \
                --max-time 30 \
                --retry 3 \
                --retry-delay 5 \
                -X GET \
                --insecure \
                --header 'Accept: application/json' \
                --header "Authorization: Bearer $API_TOKEN" \
                "$API/preferences/git.host" | jq -r '.payload.value')
GIT_HOST_PREF=$($CP_PYTHON2_PATH -c "from urlparse import urlparse; print urlparse('$GIT_HOST_PREF').hostname")

if [ -z "$GIT_HOST_PREF" ] || [ "$GIT_HOST_PREF" == "null" ] || [ "$GIT_HOST_PREF" == "None" ]; then
    echo "Cannot get the git.host value. External address ($GIT_HOST_EXTERNAL_PREF) will be used"
    GIT_HOST_PREF="$GIT_HOST_EXTERNAL_PREF"
fi

### Set the SSH keys for the root user as well
ROOT_SSH_DIR=/root/.ssh
mkdir -p $ROOT_SSH_DIR
\cp $OWNER_SSH_PRV_LOCATION $ROOT_SSH_DIR/
\cp $OWNER_SSH_PUB_LOCATION $ROOT_SSH_DIR/

### Configure keys to be used for the gitlab by OWNER
add_ssh_config  "$OWNER_SSH_CONFIG_LOCATION" \
                "$GIT_HOST_EXTERNAL_PREF" \
                "$GIT_HOST_PREF" \
                "$OWNER_SSH_PRV_LOCATION"

chown -R $OWNER:$OWNER $OWNER_SSH_DIR
ssh_fix_permissions $OWNER_SSH_DIR

### Configure keys to be used for the gitlab by root
add_ssh_config  "$ROOT_SSH_DIR/config" \
                "$GIT_HOST_EXTERNAL_PREF" \
                "$GIT_HOST_PREF" \
                "$ROOT_SSH_DIR/id_${OWNER}"

chown -R root:root $ROOT_SSH_DIR
ssh_fix_permissions $ROOT_SSH_DIR
