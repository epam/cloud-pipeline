#!/bin/bash

# Copyright 2017-2022 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

export CP_DOLLAR='$'

function is_dir_empty {
    local dir_path="$1"

    if [ ! -d "$dir_path" ]; then
        mkdir -p "$dir_path"
        return 0
    fi

    shopt -s nullglob
    shopt -s dotglob

    local dir_contents=(${1}/*)

    shopt -u nullglob
    shopt -u dotglob

    local result=0
    (( ${#dir_contents[*]} )) && result=1 || result=0
    return $result
}

function update_resources_templates {
    local templates_key="$1"
    local external_storage_var_name="$2"
    local search_pattern="${3:-"config.json"}"
    local properties_file="${4:-$CP_API_HOME/config/application.properties}"

    IFS="=" read -r param_key param_value <<< $(grep $templates_key < $properties_file)
    # This is used to expand any variable name, that can be used in the application.properties file
    param_value="$(envsubst <<< "$param_value")"
    
    if [ -z "$param_key" ] || [ -z "$param_value" ] || [ ! -d "$param_value" ]; then
        echo "$templates_key cannot be retrieved from $properties_file or that location does not exist (\"$param_value\""
        return 1
    fi

    local external_storage="${!external_storage_var_name}"
    # Import external templates if provided, this overrides the default templates backed into the docker image
    if [ "$external_storage" ]; then
        is_dir_empty "$external_storage"
        if [ $? -eq 0 ]; then
            echo "External configuration for $templates_key template is set, but the $external_storage directory is empty or does not exist. External templates WILL NOT be applied"
        else
            echo "Replacing $templates_key templates from $external_storage to $param_value"
            rm -rf $param_value/*
            \cp -r $external_storage/* $param_value/
        fi
    fi

    echo "Updating configuration files (properties_file: ${properties_file}, templates_key: ${templates_key}, search_pattern: ${search_pattern})"
    for config_json_file in $(find "$param_value" -type f -name "$search_pattern"); do
        local config_json_file_contents="$(envsubst < "$config_json_file")"
        cat <<< "$config_json_file_contents" > "$config_json_file"
        echo "$config_json_file"
    done
    echo
}

function sign_win_executable() {
    local exec_path="$1"
    local cert_path="$2"
    local cert_pass="$3"
    local cert_desc="$4"
    local cert_url="$5"

    local signed_exec_path="signed-$(basename "$exec_path")"
    if [ "$cert_pass" ]; then
        local sign_with_pass_opt=(-pass "$cert_pass")
    fi
    
    # osslsigncode requires openssl v1.1.x which is not available in the system by default.
    local ORIGINAL_LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
    local ORIGINAL_PATH="$PATH"
    export LD_LIBRARY_PATH="/opt/openssl/lib:$LD_LIBRARY_PATH"
    export PATH="/opt/openssl/bin:$PATH"
    
    osslsigncode sign \
                -pkcs12 "$cert_path" \
                -n "$cert_desc" \
                -i "$cert_url" \
                -in "$exec_path" \
                -out "$signed_exec_path" \
                "${sign_with_pass_opt[@]}"

    if [ $? -ne 0 ] || [ ! -f "$signed_exec_path" ]; then
        echo "Windows CLI $exec_path executable signing has failed. Unsigned executable will be used instead"
    else
        mv -f "$signed_exec_path" "$exec_path"
    fi

    export LD_LIBRARY_PATH="$ORIGINAL_LD_LIBRARY_PATH"
    export PATH="$ORIGINAL_PATH"
}

function sign_and_publish_pipe_win_distribution() {
    local jar_path="$1"
    local cert_path="$2"
    local cert_pass="$3"
    local cert_desc="$4"
    local cert_url="$5"
    local output_dir="$6"
    unzip -p "$jar_path" BOOT-INF/classes/static/pipe.zip >pipe.zip
    unzip -qq pipe.zip
    rm -f pipe.zip
    sign_win_executable "pipe/pipe.exe" "$cert_path" "$cert_pass" "$cert_desc" "$cert_url"
    sign_win_executable "pipe/ntlmaps/ntlmaps.exe" "$cert_path" "$cert_pass" "$cert_desc" "$cert_url"
    zip -q -r "$output_dir/pipe.zip" pipe
    rm -rf pipe
}

function configure_and_publish_cloud_data_win_distribution() {
    local _jar_path="$1"
    local _output_dir="$2"
    local _cloud_data_name="cloud-data"
    if [ "$CP_CLOUD_DATA_APP_NAME" ]; then
        local _cloud_data_name_json=", \"name\": \"${CP_CLOUD_DATA_APP_NAME}\""
        _cloud_data_name="$CP_CLOUD_DATA_APP_NAME"
    fi
    
    unzip -p "$_jar_path" BOOT-INF/classes/static/cloud-data-win64.zip > cloud-data-win64.zip
    unzip -qq cloud-data-win64.zip
    rm -f cloud-data-win64.zip

    
cat > cloud-data-win32-x64/settings.json <<EOF
{
 "certificates": [],
 "ignoreCertificateErrors": true,
 "api": "https://${CP_API_SRV_EXTERNAL_HOST}:${CP_API_SRV_EXTERNAL_PORT}/pipeline/restapi/",
 "server": "https://${CP_EDGE_EXTERNAL_HOST}:${CP_EDGE_EXTERNAL_PORT}/webdav/<USER_ID>",
 "username": "<USER_ID>" $_cloud_data_name_json
}
EOF
    mv cloud-data-win32-x64/cloud-data.exe cloud-data-win32-x64/${_cloud_data_name}.exe
    mv cloud-data-win32-x64 ${_cloud_data_name}-win32-x64
    zip -q -r "$_output_dir/${_cloud_data_name}-win64.zip" ${_cloud_data_name}-win32-x64
    rm -rf ${_cloud_data_name}-win32-x64
}

# Validate SSO and SSL certificates
if [ -z "$CP_API_SRV_CERT_DIR" ]; then
    export CP_API_SRV_CERT_DIR="/opt/api/pki"
fi

if [ ! -f "$CP_API_SRV_CERT_DIR/cp-api-srv-ssl.p12" ]; then
    echo "SSL p12 key pair not found at $CP_API_SRV_CERT_DIR/cp-api-srv-ssl.p12, but it is required to setup HTTPS for the API Service. Exiting"
    exit 1
fi

if [ ! -f "$CP_API_SRV_CERT_DIR/cp-api-srv-sso.p12" ]; then
    echo "SSO p12 key pair not found at $CP_API_SRV_CERT_DIR/cp-api-srv-sso.p12, but it is required to setup Single Sign-On for the API Service. Exiting"
    exit 1
fi

if [ ! -f "$CP_API_SRV_CERT_DIR/jwt.key.private" ] || [ ! -f "$CP_API_SRV_CERT_DIR/jwt.key.public" ]; then
    echo "JWT private/publuc key pair not found at $CP_API_SRV_CERT_DIR/jwt.key.[public/private], but it is required to setup JWT authentication of the CLI and integrated services. Exiting"
    exit 1
else
    # If JWT keys are found - export their values to initialize application.properties (jwt.key.[public/private])
    export CP_API_JWT_KEY_PUBLIC=$(<$CP_API_SRV_CERT_DIR/jwt.key.public)
    export CP_API_JWT_KEY_PRIVATE=$(<$CP_API_SRV_CERT_DIR/jwt.key.private)
fi

# Validate SSO Federation metadata

if [ -z "$CP_API_SRV_FED_META_DIR" ]; then
    export CP_API_SRV_FED_META_DIR="/opt/api/sso"
fi

if [ ! -f "$CP_API_SRV_FED_META_DIR/cp-api-srv-fed-meta.xml" ]; then
    echo "SSO Metadata not found at $CP_API_SRV_FED_META_DIR/cp-api-srv-fed-meta.xml, but it is required to setup Single Sign-On for the API Service. Exiting"
    exit 1
fi

# Setup values for the error pages placeholders
export CP_ERROR_REDIRECT_URL="${CP_ERROR_REDIRECT_URL:-https://$CP_API_SRV_EXTERNAL_HOST:$CP_API_SRV_EXTERNAL_PORT/pipeline/}"
export CP_ERROR_PLATFORM_NAME="${CP_ERROR_PLATFORM_NAME:-$CP_PREF_UI_PIPELINE_DEPLOYMENT_NAME}"
export CP_ERROR_SUPPORT_EMAIL="${CP_ERROR_SUPPORT_EMAIL:-$CP_DEFAULT_ADMIN_EMAIL}"

# Setup SSO endpoint ID and binding type
if [ -z "$CP_API_SRV_SSO_ENDPOINT_ID" ]; then
    export CP_API_SRV_SSO_ENDPOINT_ID="https://${CP_API_SRV_EXTERNAL_HOST}:${CP_API_SRV_EXTERNAL_PORT}${CP_API_SRV_SAML_ID_TRAIL:-/pipeline/}"
    echo "API SSO endpoint URL is not set explicetly, default value will be used: $CP_API_SRV_SSO_ENDPOINT_ID"
fi
export CP_API_SRV_SSO_BINDING="${CP_API_SRV_SSO_BINDING:-urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect}"

mkdir -p $CP_API_HOME/keystore/

# Import SSL cert
keytool -importkeystore -deststorepass changeit \
        -destkeypass changeit \
        -destkeystore $CP_API_HOME/keystore/store.jks \
        -srckeystore $CP_API_SRV_CERT_DIR/cp-api-srv-ssl.p12 \
        -srcstoretype PKCS12 \
        -srcstorepass changeit \
        -alias ssl \
        -noprompt

if [ $? -ne 0 ]; then
    echo "An error occured while importing SSL p12 key pair $CP_API_SRV_CERT_DIR/cp-api-srv-ssl.p12 into the API Service. Exiting"
    exit 1
fi

# Import SSO cert
keytool -importkeystore -deststorepass changeit \
        -destkeypass changeit \
        -destkeystore $CP_API_HOME/keystore/store.jks \
        -srckeystore $CP_API_SRV_CERT_DIR/cp-api-srv-sso.p12 \
        -srcstoretype PKCS12 \
        -srcstorepass changeit \
        -alias sso \
        -noprompt

if [ $? -ne 0 ]; then
    echo "An error occured while importing SSO p12 key pair $CP_API_SRV_CERT_DIR/cp-api-srv-sso.p12 into the API Service. Exiting"
    exit 1
fi

ca_cert_path="$CP_COMMON_CERT_DIR/ca-public-cert.pem"
if [ -f "$ca_cert_path" ]; then
    echo "Importing CA cert into global java keystore"
    /update-trust $ca_cert_path "cp-ca"
fi

# Create static distribution directory
export CP_API_SRV_STATIC_DIR="${CP_API_SRV_STATIC_DIR:-$CP_API_HOME/static}"
mkdir -p $CP_API_SRV_STATIC_DIR

# Sign and export pipe win distribution
export CP_WIN_CODE_SIGN_CERT_DESC="${CP_WIN_CODE_SIGN_CERT_DESC:-Cloud Pipeline}"
export CP_WIN_CODE_SIGN_CERT_URL="${CP_WIN_CODE_SIGN_CERT_URL:-https://www.epam.com/}"

win_code_sign_cert_path="$CP_API_SRV_CERT_DIR/win-code-sign-cert.pfx"
if [ -f "$win_code_sign_cert_path" ]; then
    echo "Signing Windows CLI with Code Signing Certificate"
    sign_and_publish_pipe_win_distribution "$CP_API_HOME/pipeline.jar" "$win_code_sign_cert_path" "$CP_WIN_CODE_SIGN_CERT_PASS" \
        "$CP_WIN_CODE_SIGN_CERT_DESC" "$CP_WIN_CODE_SIGN_CERT_URL" "$CP_API_SRV_STATIC_DIR"
fi

echo "Copying DTS jar file to static resources"
cp "$CP_API_HOME/data-transfer-service.jar" "$CP_API_SRV_STATIC_DIR"
echo "Calculating signature for DTS jar"
openssl dgst -sha256 -hex -r -sign "$CP_API_SRV_CERT_DIR/ssl-private-key.pem" \
        "$CP_API_SRV_STATIC_DIR/data-transfer-service.jar" | awk '{print $1}' > "$CP_API_SRV_STATIC_DIR/data-transfer-service.sign"

echo "Copying DTS windows bundle to static resources"
cp "$CP_API_HOME/data-transfer-service-windows.zip" "$CP_API_SRV_STATIC_DIR"
cp "$CP_API_HOME/data-transfer-service-linux.zip" "$CP_API_SRV_STATIC_DIR"

# Add a deployment specific configuration to the "cloud data" application:
# - API URL
# - DAV URL
# - Application name
echo "Configuring Cloud Data with the deployment specific settings"
configure_and_publish_cloud_data_win_distribution "$CP_API_HOME/pipeline.jar" "$CP_API_SRV_STATIC_DIR"

echo "Importing API SSL cert into global java keystore"
/update-trust $CP_API_SRV_CERT_DIR/ssl-public-cert.pem "cp-api-srv"

CP_API_SRV_IDP_CERT_PATH="${CP_API_SRV_IDP_CERT_PATH:-$CP_IDP_CERT_DIR}"
IDP_CERT_PATH=$CP_API_SRV_IDP_CERT_PATH/idp-public-cert.pem
echo "Importing IdP signing cert into API keystore from $IDP_CERT_PATH"
keytool  -import \
         -keystore $CP_API_HOME/keystore/store.jks \
         -storepass changeit \
         -noprompt \
         -alias idp \
         -file $IDP_CERT_PATH

# Update pipe/folder/error templates with any specific values (e.g. instance/vm size)
update_resources_templates "templates.directory" "CP_PREF_TEMPLATES_DIRECTORY_EXT" "config.json"
update_resources_templates "templates.folder.directory" "CP_PREF_TEMPLATES_FOLDER_DIRECTORY_EXT" "template.json"
update_resources_templates "templates.error.pages.directory" "CP_PREF_TEMPLATES_ERROR_PAGES_DIRECTORY_EXT" "*.html"

# Add any other static assets
if [ "$CP_PREF_API_STATIC_DIRECTORY_EXT" ] && ! is_dir_empty "$CP_PREF_API_STATIC_DIRECTORY_EXT"; then
    echo "Importing static assets from $CP_PREF_API_STATIC_DIRECTORY_EXT to $CP_API_SRV_STATIC_DIR"
    \cp -r $CP_PREF_API_STATIC_DIRECTORY_EXT/* "$CP_API_SRV_STATIC_DIR/"
fi

# Prepare liveness check for api srv
if [ -z "${CP_API_JWT_ADMIN}" ]; then
    CP_API_JWT_ADMIN=$(java  -jar /opt/api/jwt-generator.jar \
                             --private $CP_API_SRV_CERT_DIR/jwt.key.private \
                             --expires 94608000 \
                             --claim user_id=1 \
                             --claim user_name=$CP_DEFAULT_ADMIN_NAME \
                             --claim role=ROLE_ADMIN \
                             --claim group=ADMIN)
fi
export CP_API_LIVENESS_JWT_TOKEN=${CP_API_JWT_ADMIN}
export CP_REST_API_URL="https://127.0.0.1:8080/pipeline/restapi/"
envsubst '$CP_API_LIVENESS_JWT_TOKEN,$CP_REST_API_URL' < /liveness-api-srv-template.sh > /liveness-api-srv.sh
chmod +x /liveness-api-srv.sh

# Configure logging and launch
API_LOG_HOME="/var/log/cp-api/${CP_API_SRV_INSTANCE_NAME:-$CP_API_CURRENT_NODE_NAME}"
mkdir -p $API_LOG_HOME
rm -rf $CP_API_HOME/logs
ln -s $API_LOG_HOME $CP_API_HOME/logs

API_RUN_TIME_LOG=$CP_API_HOME/logs/runtime.log
mkdir -p $(dirname $API_RUN_TIME_LOG)
touch $API_RUN_TIME_LOG

nohup java $CP_API_SRV_JAVA_OPTS -jar pipeline.jar $CP_API_SRV_JAVA_SPRING_OPTS  &> $API_RUN_TIME_LOG &
APP_PID="$!"

sleep 5

# Run Filebeat
envsubst < /etc/filebeat/filebeat-template.yml > /etc/filebeat/filebeat.yml
nohup filebeat &

# Providing AZURE Cli credentials for nodeup, nodedown scripts, if this type of authentication was configured
if [ "$CP_CLOUD_PLATFORM" == "az" ] && [ -f /root/.cloud/azureProfile.json ] && [ -f /root/.cloud/accessTokens.json ]; then
  mkdir -p /root/.azure
  cp /root/.cloud/* /root/.azure/
fi


# Workaround the container hanging when being terminated
function sig_handler {
    echo "Got SIGTERM, stopping PID $APP_PID and exiting"
    if [ $APP_PID -ne 0 ]; then
        kill -SIGTERM "$APP_PID"
        wait "$APP_PID"
    fi
    exit 143
}
trap 'kill $! ; sig_handler' SIGTERM
tail -F $API_RUN_TIME_LOG &
wait "$!"
