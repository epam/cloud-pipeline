#!/usr/bin/env bash

# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The script is a transfer wrapper provided by Cloud Pipeline.
#
# It checks transferring size of storage mount related operations. If the transferring file size exceeds the maximum
# allowed value then the warning message will be shown.
#
# It takes the required transfer command (cp, mv) absolute path as a first argument and all its arguments as
# the following arguments.
#
# It uses CP_ALLOWED_MOUNT_TRANSFER_SIZE to get a maximum allowed transfer size
# and CP_ALLOWED_MOUNT_TRANSFER_SIZE_TIMEOUT to get a timeout for transfer size analysis.
#
# See https://github.com/epam/cloud-pipeline/issues/500 for more information.

set -o pipefail

function resolve_symlinks() {
    _FILE_OR_DIRECTORY="$1"
    echo $(readlink -f "$_FILE_OR_DIRECTORY")
}

function with_trailing_delimiter() {
    _STRING="$1"
    echo "${_STRING%/}/"
}

function resolve_sources_and_destination() {
    _FORWARDING_ARGUMENTS=($1)
    DESTINATION=""
    SOURCES=()
    for INDEX in "${!_FORWARDING_ARGUMENTS[@]}"
    do
        # TODO 09.07.19: Filter out all non-source or non-destination positional arguments.
        ARGUMENT="${_FORWARDING_ARGUMENTS[INDEX]}"
        if [[ "$ARGUMENT" == "-t" ]] || [[ "$ARGUMENT" == "--target-directory" ]]
        then
            NEXT_INDEX=$((INDEX + 1))
            NEXT_ARGUMENT="${_FORWARDING_ARGUMENTS[NEXT_INDEX]}"
            DESTINATION=$(resolve_symlinks "$NEXT_ARGUMENT")
            DESTINATION=$(with_trailing_delimiter "$DESTINATION")
        elif [[ "$ARGUMENT" != -* ]]
        then
            RESOLVED_ARGUMENT=$(resolve_symlinks "$ARGUMENT")
            if [[ "$RESOLVED_ARGUMENT" != "${DESTINATION%/}" ]]
            then
                SOURCES+=("$RESOLVED_ARGUMENT")
            fi
        fi
    done
    if (( "${#SOURCES[@]}" ))
    then
        if [[ -z "$DESTINATION" ]]
        then
            DESTINATION="${SOURCES[${#SOURCES[@]}-1]}"
            unset "SOURCES[${#SOURCES[@]}-1]"
        fi
        if (( "${#SOURCES[@]}" > 1 ))
        then
            # Add trailing delimiter if there are multiple sources.
            DESTINATION=$(with_trailing_delimiter "$DESTINATION")
        fi
        echo "${SOURCES[@]} $DESTINATION"
    fi
}

function has_prefix() {
    _STRING="$1"
    _PREFIXES=($2)
    for PREFIX in "${_PREFIXES[@]}"
    do
        if [[ "$_STRING" == "$PREFIX"* ]]
        then
            return 0
        fi
    done
    return 1
}

function get_size() {
    _FILE_OR_DIRECTORY="$1"
    _TIMEOUT="$2"
    TOTAL_SIZE=$(timeout "$_TIMEOUT"s du -sh --block-size=1G "$_FILE_OR_DIRECTORY" | awk '{print $1}')
    if [[ "$?" != 0 ]]
    then
        # Assume that the directory size is pretty big if du command has been timed out.
        let TOTAL_SIZE="(2**63)-1"
    fi
    echo "$TOTAL_SIZE"
}

function allowed_transfer() {
    _SOURCES=($1)
    _DESTINATION="$2"
    _MOUNTED_PATHS="$3"
    _ALLOWED_TRANSFER_SIZE="$4"
    _ALLOWED_TRANSFER_SIZE_TIMEOUT="$5"
    if [[ -z "$_SOURCES" ]] \
    || [[ -z "$_DESTINATION" ]] \
    || [[ -z "$_MOUNTED_PATHS" ]] \
    || [[ -z "$_ALLOWED_TRANSFER_SIZE" ]] \
    || [[ -z "$_ALLOWED_TRANSFER_SIZE_TIMEOUT" ]]
    then
        return 0
    fi

    RESTRICTED_TRANSFER_SIZE=""
    for SOURCE in "${_SOURCES[@]}"
    do
        if [[ -f "$SOURCE" ]] || [[ -d "$SOURCE" ]]
        then
            SOURCE_SIZE=$(get_size "$SOURCE" "$_ALLOWED_TRANSFER_SIZE_TIMEOUT")
            if (( SOURCE_SIZE > _ALLOWED_TRANSFER_SIZE ))
            then
                RESTRICTED_TRANSFER_SIZE="$SOURCE_SIZE"
                if has_prefix "$SOURCE" "$_MOUNTED_PATHS"
                then
                    return 1
                fi
            fi
        fi
    done

    if [[ "$RESTRICTED_TRANSFER_SIZE" ]]
    then
        if has_prefix "$_DESTINATION" "$_MOUNTED_PATHS"
        then
            return 1
        fi
    fi

    return 0
}

function escape_slashes() {
    _STRING="$1"
    echo "${_STRING//\//\/}"
}

function root_mount_path() {
    _PATH="$1"
    _MOUNTED_PATHS=($2)
    for MOUNT_PATH in "${_MOUNTED_PATHS[@]}"
    do
        if [[ "$_PATH" == "$MOUNT_PATH" ]]
        then
            return 0
        fi
    done
    return 1
}

function replace_all() {
    _STRING="$1"
    _PATTERN="$2"
    _REPLACEMENT="$3"
    echo "$_STRING" | sed "s/$_PATTERN/$_REPLACEMENT/"
}

MOUNTED_PATHS="$1"
MOUNT_ROOT="$2"
UNDERLYING_TRANSFER_COMMAND="$3"
shift 3 # removes first three arguments from the arguments list
FORWARDING_ARGUMENTS="$@"
ALLOWED_TRANSFER_SIZE="$CP_ALLOWED_MOUNT_TRANSFER_SIZE"
ALLOWED_TRANSFER_SIZE_TIMEOUT="${CP_ALLOWED_MOUNT_TRANSFER_SIZE_TIMEOUT:-5}"

SOURCES_AND_DESTINATION=($(resolve_sources_and_destination "$FORWARDING_ARGUMENTS"))
if (( "${#SOURCES_AND_DESTINATION[@]}" ))
then
    DESTINATION="${SOURCES_AND_DESTINATION[${#SOURCES_AND_DESTINATION[@]}-1]}"
    SOURCES=("${SOURCES_AND_DESTINATION[@]}")
    unset "SOURCES[${#SOURCES[@]}-1]"
    SOURCES_STRING="${SOURCES[@]}"

    if ! allowed_transfer "$SOURCES_STRING" "$DESTINATION" "$MOUNTED_PATHS" "$ALLOWED_TRANSFER_SIZE" "$ALLOWED_TRANSFER_SIZE_TIMEOUT"
    then
        UNDERLYING_TRANSFER_COMMAND_NAME=$(basename "$UNDERLYING_TRANSFER_COMMAND")
        ESCAPED_MOUNT_ROOT=$(escape_slashes "$MOUNT_ROOT/")
        STORAGE_PREFIX=$(escape_slashes "cp://")
        if root_mount_path "$DESTINATION" "$MOUNTED_PATHS"
        then
            # Workaround for pipe cli issue: https://github.com/epam/cloud-pipeline/issues/510
            DESTINATION=$(with_trailing_delimiter "$DESTINATION")
        fi
        SUBSTITUTED_DESTINATION=$(replace_all "$DESTINATION" "^$ESCAPED_MOUNT_ROOT" "$STORAGE_PREFIX")
        if [[ -d "$SUBSTITUTED_DESTINATION" ]]
        then
            SUBSTITUTED_DESTINATION=$(with_trailing_delimiter "$SUBSTITUTED_DESTINATION")
        fi
        OFFERED_COMMAND_REPLACEMENT=""
        for SOURCE in "${SOURCES[@]}"
        do
            SUBSTITUTED_SOURCE=$(replace_all "$SOURCE" "^$ESCAPED_MOUNT_ROOT" "$STORAGE_PREFIX")
            OFFERED_COMMAND_REPLACEMENT="$OFFERED_COMMAND_REPLACEMENT
     pipe storage $UNDERLYING_TRANSFER_COMMAND_NAME -rf $SUBSTITUTED_SOURCE $SUBSTITUTED_DESTINATION"
        done
        cat 1>&2 <<EOF

                    CLOUD PIPELINE TRANSFER MANAGEMENT WARNING

     You are going to transfer data using FUSE-mounted object storage. Data transfer
     exceeds ${ALLOWED_TRANSFER_SIZE} Gb or contains too many files. Such operation may not work properly.
     For such data volumes please use the \`pipe\` command interface:
     ${OFFERED_COMMAND_REPLACEMENT}

     Please refer to the following GitHub issue for the details:
     https://github.com/epam/cloud-pipeline/issues/500

     The operation is continued...

EOF
    fi
fi

"$UNDERLYING_TRANSFER_COMMAND" $FORWARDING_ARGUMENTS
