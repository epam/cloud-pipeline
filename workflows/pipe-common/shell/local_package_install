#!/usr/bin/env bash

# Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -s|--source)
    _SOURCE="$2"
    shift
    shift
    ;;
    -c|--check-command)
    _PACKAGE_TO_CHECK="$2"
    shift
    shift
    ;;
    -p|--source-is-prefix)
    _SOURCE_IS_PREFIX="yes"
    shift
    ;;
    -d|--distro-name-only)
    _CONSIDER_ONLY_DISTRO="yes"
    shift
    ;;
esac
done

function check_installed {
      local _COMMAND_TO_CHECK="$1"
      command -v "$_COMMAND_TO_CHECK" >/dev/null 2>&1
      return $?
}

# This script will download archive with sources to be installed

if [ -z "$_SOURCE" ]; then
     echo "Parameter SOURCE is not specified, no package will be installed"
     exit 1
fi
if [ "$_SOURCE_IS_PREFIX" ]; then
    CP_OS_INFO_SCRIPT="$COMMON_REPO_DIR/shell/os_info"
    if [ ! -f "$CP_OS_INFO_SCRIPT" ]; then
        echo "Unable to get OS information for the local installation (os_info not found), exiting"
        exit 1
    fi
    . "$CP_OS_INFO_SCRIPT"

    if [ -z "$CP_OS" ] || [ -z "$CP_VER" ]; then
        echo "Unable to get OS information for the local installation, exiting"
        exit 1
    fi

    if [ "$_CONSIDER_ONLY_DISTRO" ]; then
        _SOURCE="${_SOURCE}-${CP_OS}.tar"
    else
        _SOURCE="${_SOURCE}-${CP_OS}-${CP_VER}.tar"
    fi
    echo "Using distro-specific source ($_SOURCE) for the local installation"
fi

_PATH_TO_PACKAGES=/tmp/localinstall
_ARCH_NAME=$(basename "$_SOURCE")
_BIN_DIR=${_ARCH_NAME%.*}

mkdir -p $_PATH_TO_PACKAGES
_DISTR_DOWNLOAD_RESULT=1
if check_installed "wget"; then
    wget -q --no-check-certificate $_SOURCE --directory-prefix=$_PATH_TO_PACKAGES > /dev/null
    _DISTR_DOWNLOAD_RESULT=$?
elif check_installed "curl"; then
    cd $_PATH_TO_PACKAGES
    curl -s -k -O $_SOURCE  > /dev/null
    _DISTR_DOWNLOAD_RESULT=$?
    cd -
fi
    
if [ $_DISTR_DOWNLOAD_RESULT -ne 0 ]; then
    echo "Unable to download distribution ($_SOURCE) for the local installation, exiting"
    exit 1
fi

tar -xf "$_PATH_TO_PACKAGES/$_ARCH_NAME" -C $_PATH_TO_PACKAGES
if [ $? -ne 0 ]; then
    echo "Unable to unpack distribution (downloaded from $_SOURCE) for the local installation, exiting"
    exit 1
fi

check_installed "dpkg" && check_installed "apt-get" && {
    echo "Local installation of the deb file(s): $_PATH_TO_PACKAGES/$_BIN_DIR/*.deb"
    apt-get update
    export DEBIAN_FRONTEND=noninteractive
    dpkg -i $_PATH_TO_PACKAGES/$_BIN_DIR/*.deb &> /dev/null
    dpkg --configure -a > /dev/null
    apt-get install -f -y
};

check_installed "yum" && {
    echo "Local installation of the rpm file(s): $_PATH_TO_PACKAGES/$_BIN_DIR/*.rpm"
    yum localinstall $_PATH_TO_PACKAGES/$_BIN_DIR/*.rpm -y -q > /dev/null
};

rm -rf $_PATH_TO_PACKAGES

if [ "$_PACKAGE_TO_CHECK" ]; then
    command -v $_PACKAGE_TO_CHECK >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "Local installation of $_PACKAGE_TO_CHECK failed"
        exit 1
    fi
fi

echo "Done with packages installation"
