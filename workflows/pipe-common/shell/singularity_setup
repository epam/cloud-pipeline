#!/bin/bash

# Copyright 2017-2023 EPAM Systems, Inc. (https://www.epam.com/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

######################################################
# Singularity distribution build commands
######################################################
# Build in a clear environment
# -
# docker run -it --rm \
#     -v /root/build/singularity/:/var/lib/singularity/ \
#     centos:7.6.1810 bash

# v2.5.2
# -
# yum install -y libarchive-devel squashfs-tools
# VERSION=2.5.2
# wget https://github.com/singularityware/singularity/releases/download/$VERSION/singularity-$VERSION.tar.gz && \
# tar xvf singularity-$VERSION.tar.gz && \
# cd singularity-$VERSION && \
# ./configure --prefix=/var/lib/singularity && \
# make -j$(nproc) && \
# make install

# v3.6.1/v3.7.3
# -
# yum groupinstall -y 'Development Tools' && \
#     yum install -y \
#     openssl-devel \
#     libuuid-devel \
#     libseccomp-devel \
#     wget \
#     squashfs-tools

# cd ~
# export VERSION=1.15 OS=linux ARCH=amd64 && \
#     wget https://dl.google.com/go/go$VERSION.$OS-$ARCH.tar.gz && \
#     tar -C /usr/local -xzvf go$VERSION.$OS-$ARCH.tar.gz && \
#     rm -f go$VERSION.$OS-$ARCH.tar.gz
# export GOPATH=${HOME}/go
# export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin
# go get -u github.com/golang/dep/cmd/dep

# export VERSION=3.7.3 && \
#     mkdir -p $GOPATH/src/github.com/sylabs && \
#     cd $GOPATH/src/github.com/sylabs && \
#     wget https://github.com/sylabs/singularity/releases/download/v${VERSION}/singularity-${VERSION}.tar.gz && \
#     tar -xzf singularity-${VERSION}.tar.gz && \
#     cd singularity
# ./mconfig --prefix=/var/lib/singularity && \
#     make -C ./builddir && \
#     make -C ./builddir install

# Packing both versions
# -
# cd /root/build/
# tar -zcf singularity.tgz singularity/
# aws s3 cp singularity.tgz s3://cloud-pipeline-oss-builds/tools/singularity/$VERSION/singularity.tgz

SNGLRT_SETUP_TASK="SetupSingularity"

########################
# Install prerequisites
########################

pipe_log_info "Started singularity dependencies setup" "$SNGLRT_SETUP_TASK"

pkg_manager=$(which_pkg_manager)
if [ $? -ne 0 ]; then
    pipe_log_fail "Cannot find package manager to install singularity dependencies" "$SNGLRT_SETUP_TASK"
    exit 1
fi

if [ "$pkg_manager" == "yum" ]; then
    yum install squashfs-tools libseccomp-devel -y -q
    deps_install_result=$?
elif [ "$pkg_manager" == "apt" ]; then
    apt-get install -t stable squashfs-tools libseccomp-dev -y -qq
    deps_install_result=$?
else
    pipe_log_fail "Unknown package manager: $pkg_manager" "$SNGLRT_SETUP_TASK"
    exit 1
fi

if [ $deps_install_result -ne 0 ]; then
    pipe_log_fail "Cannot install singularity dependencies" "$SNGLRT_SETUP_TASK"
    exit 1
fi

pipe_log_info "Done with singularity dependencies" "$SNGLRT_SETUP_TASK"

######################
# Install Singularity 
######################

# Two version are available for now:
# 2.5.2:            tools/singularity/2.5.2/singularity.tgz
# 3.6.1:            tools/singularity/3.6.1/singularity.tgz
# 3.7.3 (default):  tools/singularity/3.7.3/singularity.tgz
CP_SNGLRT_DISTR_URL="${CP_SNGLRT_DISTR_URL:-"${GLOBAL_DISTRIBUTION_URL}tools/singularity/3.7.3/singularity.tgz"}"
CP_SNGLRT_INSTALL_PATH="${CP_SNGLRT_INSTALL_PATH:-/var/lib/singularity}"
CP_SNGLRT_INSTALL_TEMP="/tmp/snglrt-tmp"
rm -rf "$CP_SNGLRT_INSTALL_TEMP" && \
mkdir -p "$CP_SNGLRT_INSTALL_TEMP"

pipe_log_info "Started Singularity setup\n-> Distribution URL: ${CP_SNGLRT_DISTR_URL}\n-> Install path: ${CP_SNGLRT_INSTALL_PATH}" "$SNGLRT_SETUP_TASK"

wget -q "$CP_SNGLRT_DISTR_URL" -O "$CP_SNGLRT_INSTALL_TEMP/singularity.tgz"
if [ $? -ne 0 ]; then
    pipe_log_fail "Cannot download singularity distribution from $CP_SNGLRT_DISTR_URL" "$SNGLRT_SETUP_TASK"
    exit 1
fi
if [ -f "$CP_SNGLRT_INSTALL_TEMP/singularity.tgz" ]; then
    pipe_log_info "Distribution downloaded to $CP_SNGLRT_INSTALL_TEMP/singularity.tgz" "$SNGLRT_SETUP_TASK"
else
    pipe_log_fail "Cannot find singularity distribution at $CP_SNGLRT_INSTALL_TEMP/singularity.tgz" "$SNGLRT_SETUP_TASK"
    exit 1
fi

tar -zxf "$CP_SNGLRT_INSTALL_TEMP/singularity.tgz" -C "$CP_SNGLRT_INSTALL_TEMP"
if [ $? -ne 0 ]; then
    pipe_log_fail "Cannot unpack singularity distribution to $CP_SNGLRT_INSTALL_PATH" "$SNGLRT_SETUP_TASK"
    exit 1
fi
CP_SNGLRT_EXTRACTED_FILES=($(shopt -s nullglob;shopt -s dotglob;echo $CP_SNGLRT_INSTALL_TEMP/singularity/*))
if [ ${#CP_SNGLRT_EXTRACTED_FILES[@]} -gt 0 ]; then
    pipe_log_info "Distribution extracted to: $CP_SNGLRT_INSTALL_TEMP (${#CP_SNGLRT_EXTRACTED_FILES[@]} files)" "$SNGLRT_SETUP_TASK"
else
    pipe_log_fail "Nothing is extracted from the $CP_SNGLRT_INSTALL_TEMP/singularity.tgz to $CP_SNGLRT_INSTALL_TEMP/singularity" "$SNGLRT_SETUP_TASK"
    exit 1
fi

rm -rf "$CP_SNGLRT_INSTALL_PATH" && \
mkdir -p "$CP_SNGLRT_INSTALL_PATH" && \
mv $CP_SNGLRT_INSTALL_TEMP/singularity/* "${CP_SNGLRT_INSTALL_PATH}/"
if [ $? -ne 0 ]; then
    pipe_log_fail "Cannot move singularity distribution from $CP_SNGLRT_INSTALL_TEMP" "$SNGLRT_SETUP_TASK"
    exit 1
fi

rm -rf $CP_SNGLRT_INSTALL_TEMP

# Configure the singularity setup
if [ -d "$CP_USR_BIN" ]; then
    rm -f $CP_USR_BIN/*singularity
    ln -s "$CP_SNGLRT_INSTALL_PATH/bin/singularity" "$CP_USR_BIN/singularity"
    ln -s "$CP_SNGLRT_INSTALL_PATH/bin/run-singularity" "$CP_USR_BIN/run-singularity"
    rm -f /usr/local/bin/*singularity
    ln -s "$CP_SNGLRT_INSTALL_PATH/bin/singularity" "/usr/local/bin/singularity"
    ln -s "$CP_SNGLRT_INSTALL_PATH/bin/run-singularity" "/usr/local/bin/run-singularity"
fi

# Check singularity setup
CP_SNGLRT_VERSION=$(singularity --version 2>/dev/null)
if [ $? -ne 0 ]; then
    pipe_log_fail "Cannot check singularity version, installation might be corrupted" "$SNGLRT_SETUP_TASK"
    exit 1
fi

# Configure singularity credentials
export CP_ENV_FILE_TO_SOURCE=${CP_ENV_FILE_TO_SOURCE:-/etc/cp_env.sh}
if [ "$OWNER" ] && [ "$API_TOKEN" ]; then
    export SINGULARITY_DOCKER_USERNAME="$OWNER"
    export SINGULARITY_DOCKER_PASSWORD="$API_TOKEN"
    echo "export SINGULARITY_DOCKER_USERNAME=\"$SINGULARITY_DOCKER_USERNAME\"" >> "$CP_ENV_FILE_TO_SOURCE"
    echo "export SINGULARITY_DOCKER_PASSWORD=\"$SINGULARITY_DOCKER_PASSWORD\"" >> "$CP_ENV_FILE_TO_SOURCE"
    pipe_log_info "Credentials are configured via enviroment variables for $SINGULARITY_DOCKER_USERNAME" "$SNGLRT_SETUP_TASK"
else
    pipe_log_warn "OWNER or API_TOKEN are not set, can't configure the credentials to the internal registry" "$SNGLRT_SETUP_TASK"
fi

# Configure singularity certificate
if [ "$OWNER" ] && [ "$API" ] && [ "$API_TOKEN" ]; then
    _DIND_REGISTRIES_JSON=$(curl -k -s --fail --header "Authorization: Bearer $API_TOKEN" $API/dockerRegistry/loadCerts)
    if [ $? -ne 0 ]; then
        pipe_log_warn "Cannot get the list of the certificates for the docker registries" "$SNGLRT_SETUP_TASK"
    else
        _DIND_REGISTRY_CERT_DIR="/etc/ssl/certs"
        mkdir -p $_DIND_REGISTRY_CERT_DIR
        _DIND_REGISTRIES_LIST=$(echo "$_DIND_REGISTRIES_JSON" | jq -r '.payload | keys[]')
        while read _DIND_REGISTRY_NAME; do
            pipe_log_info "Configuring certificate for $_DIND_REGISTRY_NAME registry" "$SNGLRT_SETUP_TASK"
            _DIND_REGISTRY_CERT="${_DIND_REGISTRY_CERT_DIR}/${_DIND_REGISTRY_NAME}.pem"
            echo $_DIND_REGISTRIES_JSON | jq -r ".payload.\"${_DIND_REGISTRY_NAME}\"" > "$_DIND_REGISTRY_CERT"
            pipe_log_info "Certificate is written to $_DIND_REGISTRY_CERT" "$SNGLRT_SETUP_TASK"
        done <<<$_DIND_REGISTRIES_LIST
    fi
else
    pipe_log_warn "One of the environment variables OWNER, API, API_TOKEN is not set, can't configure the certificates for the internal registry" "$SNGLRT_SETUP_TASK"
fi

# Configure Singularity to probe the host for all mounted filesystems and bind those into containers at runtime
if [ "$CP_CAP_SINGULARITY_MOUNT_FS" == "true" ]; then
    $CP_USR_BIN/singularity config global --set "mount hostfs" yes
    echo "Singularity 'MOUNT HOSTFS' option was be enabled"
fi

motd_setup add "This job was launched with 'Singularity' enabled
It is configured with the credentials for the internal docker registry
To pull/push from the external docker registry please configure variables:

# 1. For the public registries (e.g. DockerHub):
$ unset SINGULARITY_DOCKER_USERNAME SINGULARITY_DOCKER_PASSWORD

# 2. For the private registries:
$ export SINGULARITY_DOCKER_USERNAME=<username>
$ export SINGULARITY_DOCKER_PASSWORD=<password>"

pipe_log_success "Singularity successfully installed (version: $CP_SNGLRT_VERSION)" "$SNGLRT_SETUP_TASK"
