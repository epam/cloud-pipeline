<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean class="com.epam.pipeline.dao.user.UserDao" id="userDao" autowire="byName">
        <property name="userSequence" value="pipeline.s_user"/>
        <property name="createUserQuery">
            <value>
                <![CDATA[
                    INSERT INTO pipeline.user (
                        id,
                        name,
                        groups,
                        attributes,
                        default_storage_id,
                        registration_date,
                        first_login_date)
                    VALUES (
                        :USER_ID,
                        :USER_NAME,
                        :USER_GROUPS,
                        to_jsonb(:ATTRIBUTES::jsonb),
                        :USER_DEFAULT_STORAGE_ID,
                        :REGISTRATION_DATE,
                        :FIRST_LOGIN_DATE)
                ]]>
            </value>
        </property>
        <property name="updateUserQuery">
            <value>
                <![CDATA[
                    UPDATE pipeline.user SET
                        name = :USER_NAME,
                        groups = :USER_GROUPS,
                        default_storage_id = :USER_DEFAULT_STORAGE_ID,
                        attributes = to_jsonb(:ATTRIBUTES::jsonb),
                        blocked = :USER_BLOCKED,
                        first_login_date = :FIRST_LOGIN_DATE
                    WHERE
                        id = :USER_ID
                ]]>
            </value>
        </property>
        <property name="loadAllUsersQuery">
            <value>
                <![CDATA[
                     SELECT
                      u.id as user_id,
                      u.name as user_name,
                      u.groups as user_groups,
                      u.attributes as attributes,
                      u.default_storage_id as user_default_storage_id,
                      u.blocked as user_blocked,
                      u.registration_date,
                      u.first_login_date,
                      r.id as role_id,
                      r.name as role_name,
                      r.predefined as role_predefined,
                      r.user_default as role_user_default,
                      r.default_storage_id as role_default_storage_id
                    FROM pipeline.user u
                      LEFT JOIN pipeline.user_roles ur ON u.id = ur.user_id
                      LEFT JOIN pipeline.role r ON ur.role_id = r.id
                ]]>
            </value>
        </property>
        <property name="findUsersByPrefixQuery">
            <value>
                <![CDATA[
                    SELECT
                        u.id as user_id,
                        u.name as user_name,
                        u.groups as user_groups,
                        u.attributes as attributes,
                        u.default_storage_id as user_default_storage_id,
                        u.blocked as user_blocked,
                        u.registration_date,
                        u.first_login_date,
                        r.id as role_id,
                        r.name as role_name,
                        r.predefined as role_predefined,
                        r.user_default as role_user_default,
                        r.default_storage_id as role_default_storage_id
                    FROM pipeline.user u
                        LEFT JOIN pipeline.user_roles ur ON u.id = ur.user_id
                        LEFT JOIN pipeline.role r ON ur.role_id = r.id
                    WHERE
                        LOWER(u.name) LIKE :PREFIX OR
                        EXISTS(
                            SELECT 1
                            FROM jsonb_each_text(u.attributes) AS e(key, value)
                            WHERE LOWER(e.value) LIKE :PREFIX
                        )
                ]]>
            </value>
        </property>
        <property name="loadUserByIdQuery">
            <value>
                <![CDATA[
                    SELECT
                      u.id as user_id,
                      u.name as user_name,
                      u.groups as user_groups,
                      u.attributes as attributes,
                      u.default_storage_id as user_default_storage_id,
                      u.blocked as user_blocked,
                      u.registration_date,
                      u.first_login_date,
                      r.id as role_id,
                      r.name as role_name,
                      r.predefined as role_predefined,
                      r.user_default as role_user_default,
                      r.default_storage_id as role_default_storage_id
                    FROM pipeline.user u
                      LEFT JOIN pipeline.user_roles ur ON u.id = ur.user_id
                      LEFT JOIN pipeline.role r ON ur.role_id = r.id
                    WHERE u.id = ?;
                ]]>
            </value>
        </property>
        <property name="loadUsersByStorageIdQuery">
            <value>
                <![CDATA[
                    SELECT
                      u.id as user_id,
                      u.name as user_name,
                      u.groups as user_groups,
                      u.attributes as attributes,
                      u.default_storage_id as user_default_storage_id,
                      u.blocked as user_blocked,
                      u.registration_date,
                      u.first_login_date,
                      r.id as role_id,
                      r.name as role_name,
                      r.predefined as role_predefined,
                      r.user_default as role_user_default,
                      r.default_storage_id as role_default_storage_id
                    FROM pipeline.user u
                      LEFT JOIN pipeline.user_roles ur ON u.id = ur.user_id
                      LEFT JOIN pipeline.role r ON ur.role_id = r.id
                    WHERE u.default_storage_id = ?;
                ]]>
            </value>
        </property>
        <property name="loadUserByNameQuery">
            <value>
                <![CDATA[
                    SELECT
                      u.id as user_id,
                      u.name as user_name,
                      u.groups as user_groups,
                      u.attributes as attributes,
                      u.default_storage_id as user_default_storage_id,
                      u.blocked as user_blocked,
                      u.registration_date,
                      u.first_login_date,
                      r.id as role_id,
                      r.name as role_name,
                      r.predefined as role_predefined,
                      r.user_default as role_user_default,
                      r.default_storage_id as role_default_storage_id
                    FROM pipeline.user u
                      LEFT JOIN pipeline.user_roles ur ON u.id = ur.user_id
                      LEFT JOIN pipeline.role r ON ur.role_id = r.id
                    WHERE LOWER(u.name) = LOWER(?);
                ]]>
            </value>
        </property>
        <property name="loadUsersByNamesQuery">
            <value>
                <![CDATA[
                    SELECT
                      u.id as user_id,
                      u.name as user_name,
                      u.groups as user_groups,
                      u.attributes as attributes,
                      u.default_storage_id as user_default_storage_id,
                      u.blocked as user_blocked,
                      u.registration_date,
                      u.first_login_date,
                      r.id as role_id,
                      r.name as role_name,
                      r.predefined as role_predefined,
                      r.user_default as role_user_default,
                      r.default_storage_id as role_default_storage_id
                    FROM pipeline.user u
                        LEFT JOIN pipeline.user_roles ur
                            ON u.id = ur.user_id
                        LEFT JOIN pipeline.role r
                            ON ur.role_id = r.id
                    WHERE
                        LOWER(u.name) IN (@in@)
                ]]>
            </value>
        </property>
        <property name="loadUsersByGroupQuery">
            <value>
                <![CDATA[
                    SELECT
                      u.id as user_id,
                      u.name as user_name,
                      u.groups as user_groups,
                      u.attributes as attributes,
                      u.default_storage_id as user_default_storage_id,
                      u.blocked as user_blocked,
                      u.registration_date,
                      u.first_login_date,
                      r.id as role_id,
                      r.name as role_name,
                      r.predefined as role_predefined,
                      r.user_default as role_user_default,
                      r.default_storage_id as role_default_storage_id
                    FROM pipeline.user u
                      LEFT JOIN pipeline.user_roles ur ON u.id = ur.user_id
                      LEFT JOIN pipeline.role r ON ur.role_id = r.id
                    WHERE ? = ANY(u.groups);
                ]]>
            </value>
        </property>
        <property name="loadUserByGroupQuery">
            <value>
                <![CDATA[
                    SELECT
                      u.id as user_id,
                      u.name as user_name,
                      u.groups as user_groups,
                      u.attributes as attributes,
                      u.default_storage_id as user_default_storage_id,
                      u.blocked as user_blocked,
                      u.registration_date,
                      u.first_login_date,
                      r.id as role_id,
                      r.name as role_name,
                      r.predefined as role_predefined,
                      r.user_default as role_user_default,
                      r.default_storage_id as role_default_storage_id
                    FROM pipeline.user u
                      LEFT JOIN pipeline.user_roles ur ON u.id = ur.user_id
                      LEFT JOIN pipeline.role r ON ur.role_id = r.id
                    WHERE
                        u.name = ? AND ? = ANY(u.groups);
                ]]>
            </value>
        </property>
        <property name="findGroupsByPrefixQuery">
            <value>
                <![CDATA[
                    SELECT array_agg(groups) as user_groups
                    FROM (
                        SELECT DISTINCT groups
                        FROM (
                            SELECT UNNEST(groups) AS groups
                            FROM pipeline.user
                        ) AS gr1
                    ) AS gr2
                    WHERE ? = left(LOWER(groups), length(?));
                ]]>
            </value>
        </property>
        <property name="loadAllGroupsQuery">
            <value>
                <![CDATA[
                SELECT array_agg(groups) as user_groups
                FROM (
                    SELECT DISTINCT groups
                        FROM (
                            SELECT UNNEST(groups) AS groups
                            FROM pipeline.user
                        ) AS gr1
                ) AS gr2;
                ]]>
            </value>
        </property>
        <property name="loadUserListQuery">
            <value>
                <![CDATA[
                    SELECT
                      u.id as user_id,
                      u.name as user_name,
                      u.groups as user_groups,
                      u.attributes as attributes,
                      u.default_storage_id as user_default_storage_id,
                      u.blocked as user_blocked,
                      u.registration_date,
                      u.first_login_date,
                      r.id as role_id,
                      r.name as role_name,
                      r.predefined as role_predefined,
                      r.user_default as role_user_default,
                      r.default_storage_id as role_default_storage_id
                    FROM pipeline.user u
                      LEFT JOIN pipeline.user_roles ur ON u.id = ur.user_id
                      LEFT JOIN pipeline.role r ON ur.role_id = r.id
                    WHERE
                        u.id in (:IDS)
                ]]>
            </value>
        </property>
        <property name="deleteUserQuery">
            <value>
                <![CDATA[
                    DELETE FROM pipeline.user WHERE id = ?
                ]]>
            </value>
        </property>
        <property name="addRoleToUserQuery">
            <value>
                <![CDATA[
                    INSERT INTO pipeline.user_roles (
                        user_id,
                        role_id)
                    VALUES (
                        :USER_ID,
                        :ROLE_ID)
                ]]>
            </value>
        </property>
        <property name="deleteRoleFromUserQuery">
            <value>
                <![CDATA[
                    DELETE FROM pipeline.user_roles WHERE user_id = :USER_ID AND role_id = :ROLE_ID
                ]]>
            </value>
        </property>
        <property name="deleteUserRolesQuery">
            <value>
                <![CDATA[
                    DELETE FROM pipeline.user_roles WHERE user_id = ?
                ]]>
            </value>
        </property>
    </bean>
</beans>
